{"version":3,"mappings":"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","names":["AppShell","btn","e","day","display","round","timerBar","timerDisplay","timerRound","IDB","__publicField","resolve","reject","request","event","db","sessionsStore","storeName","mode","key","store","data","indexName","query","index","idb","_ProgramManager","seedData","__vitePreload","program","programId","dayId","a","b","ProgramManager","programManager","ViewHome","card","blockTypes","exerciseCount","sum","block","type","ViewDay","chip","el","exerciseId","substitute","timerLabel","exercise","setsReps","sub","timerMode","BaseTimer","tickInterval","callback","elapsed","remainingInPeriod","currentRound","totalRounds","previousRound","error","milliseconds","totalSeconds","minutes","seconds","totalMs","ms","remainingSeconds","EMOMTimer","periodDurationMs","timeInPeriod","rounds","periodSeconds","N90Timer","FixedRestTimer","durationMs","TimedCircuitTimer","workDurationMs","restDurationMs","periodDuration","workSeconds","restSeconds","workMs","restMs","WakeLockManager","err","wakeLockManager","BackgroundTimerManager","timeInBackground","notification","backgroundTimerManager","FeedbackManager","enabled","pattern","frequency","duration","volume","oscillator","gainNode","freq","feedbackManager","ViewSession","currentExercise","totalBlocks","totalExercises","completedExercises","totalSets","setNumber","remaining","progress","phase","timerState","isCompleted","primaryButton","isRestingBetweenSets","nextExercise","parts","total","target","isLastSet","durationText","dialogHtml","dialogElement","discardBtn","saveBtn","currentPhase","secondsRemaining","lastWarnTime","currentTime","progressFill","timerProgress","timerPhase","AppUpdater","newWorker","worker","appUpdater","UpdateNotification","updateBtn","dismissBtn","Router","path","handler","hash","route","homeRoute","r","params","pathParts","hashParts","matches","i","router","showHome","content","showDay","viewDay","appShell","check","shadowRoot","showSession","viewSession"],"ignoreList":[],"sources":["../../src/ui/app-shell.ts","../../src/idb.ts","../../src/program.ts","../../src/ui/view-home.ts","../../src/ui/view-day.ts","../../src/timers/timer-engine.ts","../../src/timers/emom.ts","../../src/timers/n90.ts","../../src/timers/fixed-rest.ts","../../src/utils/wake-lock.ts","../../src/utils/background-timer.ts","../../src/utils/feedback.ts","../../src/ui/view-session.ts","../../src/utils/app-updater.ts","../../src/ui/update-notification.ts","../../src/router.ts","../../src/main.ts"],"sourcesContent":["export class AppShell extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n    \n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          height: 100vh;\n          height: 100dvh;\n          background: var(--bg-primary);\n          color: var(--text-primary);\n          position: relative;\n        }\n\n        header {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          background: var(--bg-secondary);\n          padding: env(safe-area-inset-top) 16px 0 16px;\n          border-bottom: 1px solid var(--border);\n          z-index: 10;\n        }\n\n        .header-content {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 12px 0;\n        }\n\n        .logo {\n          display: flex;\n          align-items: center;\n        }\n\n        .day-selector {\n          display: flex;\n          gap: 8px;\n        }\n\n        .day-btn {\n          padding: 6px 12px;\n          background: var(--bg-primary);\n          border: 1px solid var(--border);\n          border-radius: 6px;\n          color: var(--text-primary);\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .day-btn.active {\n          background: var(--accent);\n          color: white;\n          border-color: var(--accent);\n        }\n\n        .settings-btn {\n          padding: 6px;\n          background: transparent;\n          border: none;\n          color: var(--text-secondary);\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          border-radius: 4px;\n          transition: all 0.2s;\n        }\n\n        .settings-btn:hover {\n          background: var(--bg-primary);\n          color: var(--text-primary);\n        }\n\n        main {\n          position: absolute;\n          top: calc(env(safe-area-inset-top) + 65px); /* Safe area + header content */\n          left: 0;\n          right: 0;\n          bottom: 0;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n          padding: 0;\n          background: var(--bg-primary);\n        }\n\n        .timer-bar {\n          position: fixed;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          background: var(--bg-secondary);\n          border-top: 1px solid var(--border);\n          padding: 12px 16px;\n          padding-bottom: calc(12px + env(safe-area-inset-bottom));\n          display: none;\n          backdrop-filter: blur(10px);\n          -webkit-backdrop-filter: blur(10px);\n        }\n\n        .timer-bar.active {\n          display: block;\n        }\n\n        .timer-content {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n\n        .timer-display {\n          font-size: 24px;\n          font-weight: 600;\n          font-variant-numeric: tabular-nums;\n        }\n\n        .timer-controls {\n          display: flex;\n          gap: 8px;\n        }\n\n        .timer-btn {\n          padding: 8px 16px;\n          background: var(--accent);\n          color: white;\n          border: none;\n          border-radius: 6px;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n        }\n\n        .timer-btn.pause {\n          background: var(--warning);\n        }\n\n        .timer-round {\n          font-size: 14px;\n          color: var(--text-secondary);\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host {\n            --bg-primary: #000000;\n            --bg-secondary: #1a1a1a;\n            --text-primary: #ffffff;\n            --text-secondary: #999999;\n            --border: #333333;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n      </style>\n\n      <header>\n        <div class=\"header-content\">\n          <div class=\"logo\">\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n              <rect width=\"32\" height=\"32\" rx=\"6\" fill=\"#000000\"/>\n              <text x=\"16\" y=\"16\" font-family=\"-apple-system, system-ui, sans-serif\" font-size=\"18\" font-weight=\"bold\" fill=\"#FFFFFF\" text-anchor=\"middle\" dominant-baseline=\"middle\">M</text>\n            </svg>\n          </div>\n          <div class=\"day-selector\">\n            <button class=\"day-btn active\" data-day=\"1\">Day 1</button>\n            <button class=\"day-btn\" data-day=\"2\">Day 2</button>\n            <button class=\"day-btn\" data-day=\"3\">Day 3</button>\n          </div>\n          <button class=\"settings-btn\" aria-label=\"Settings\">\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\"/>\n              <path fill-rule=\"evenodd\" d=\"M10 1.5a8.5 8.5 0 100 17 8.5 8.5 0 000-17zM10 3a7 7 0 100 14 7 7 0 000-14z\"/>\n            </svg>\n          </button>\n        </div>\n      </header>\n\n      <main id=\"content\">\n      </main>\n\n      <update-notification></update-notification>\n\n      <div class=\"timer-bar\" id=\"timer-bar\">\n        <div class=\"timer-content\">\n          <div>\n            <div class=\"timer-display\" id=\"timer-display\">00:00</div>\n            <div class=\"timer-round\" id=\"timer-round\">Round 1/6</div>\n          </div>\n          <div class=\"timer-controls\">\n            <button class=\"timer-btn\" id=\"timer-toggle\">Start</button>\n            <button class=\"timer-btn pause\" id=\"timer-reset\">Reset</button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private setupEventListeners() {\n    if (!this.shadowRoot) return;\n\n    // Day selector\n    this.shadowRoot.querySelectorAll('.day-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const target = e.target as HTMLButtonElement;\n        const day = target.dataset.day;\n        if (day) {\n          this.selectDay(day);\n        }\n      });\n    });\n\n    // Settings button\n    const settingsBtn = this.shadowRoot.querySelector('.settings-btn');\n    settingsBtn?.addEventListener('click', () => {\n      this.dispatchEvent(new CustomEvent('open-settings'));\n    });\n  }\n\n  private selectDay(day: string) {\n    if (!this.shadowRoot) return;\n    \n    this.shadowRoot.querySelectorAll('.day-btn').forEach(btn => {\n      btn.classList.remove('active');\n    });\n    \n    const selectedBtn = this.shadowRoot.querySelector(`.day-btn[data-day=\"${day}\"]`);\n    selectedBtn?.classList.add('active');\n    \n    this.dispatchEvent(new CustomEvent('day-selected', { detail: { day } }));\n  }\n\n  showTimer(display: string, round: string) {\n    if (!this.shadowRoot) return;\n    \n    const timerBar = this.shadowRoot.querySelector('#timer-bar');\n    const timerDisplay = this.shadowRoot.querySelector('#timer-display');\n    const timerRound = this.shadowRoot.querySelector('#timer-round');\n    \n    if (timerBar) timerBar.classList.add('active');\n    if (timerDisplay) timerDisplay.textContent = display;\n    if (timerRound) timerRound.textContent = round;\n  }\n\n  hideTimer() {\n    if (!this.shadowRoot) return;\n    \n    const timerBar = this.shadowRoot.querySelector('#timer-bar');\n    if (timerBar) timerBar.classList.remove('active');\n  }\n}\n\ncustomElements.define('app-shell', AppShell);","type StoreNames = 'programs' | 'days' | 'sessions';\n\nclass IDB {\n  private db: IDBDatabase | null = null;\n  private readonly dbName = 'minimalift_v1';\n  private readonly version = 1;\n\n  async openDb(): Promise<IDBDatabase> {\n    if (this.db) return this.db;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(this.db);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create programs store\n        if (!db.objectStoreNames.contains('programs')) {\n          db.createObjectStore('programs', { keyPath: 'programId' });\n        }\n\n        // Create days store with index\n        if (!db.objectStoreNames.contains('days')) {\n          const daysStore = db.createObjectStore('days', { keyPath: 'dayId' });\n          daysStore.createIndex('programId', 'programId', { unique: false });\n        }\n\n        // Create sessions store with indexes\n        if (!db.objectStoreNames.contains('sessions')) {\n          const sessionsStore = db.createObjectStore('sessions', { \n            keyPath: 'sessionId', \n            autoIncrement: true \n          });\n          sessionsStore.createIndex('dayId', 'dayId', { unique: false });\n          sessionsStore.createIndex('date', 'startedAt', { unique: false });\n        }\n      };\n    });\n  }\n\n  async tx(storeName: StoreNames, mode: IDBTransactionMode = 'readonly'): Promise<IDBObjectStore> {\n    const db = await this.openDb();\n    const transaction = db.transaction([storeName], mode);\n    return transaction.objectStore(storeName);\n  }\n\n  async get<T>(storeName: StoreNames, key: IDBValidKey): Promise<T | undefined> {\n    const store = await this.tx(storeName);\n    return new Promise((resolve, reject) => {\n      const request = store.get(key);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getAll<T>(storeName: StoreNames): Promise<T[]> {\n    const store = await this.tx(storeName);\n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async put<T>(storeName: StoreNames, data: T): Promise<IDBValidKey> {\n    const store = await this.tx(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.put(data);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async delete(storeName: StoreNames, key: IDBValidKey): Promise<void> {\n    const store = await this.tx(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.delete(key);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async indexGetAll<T>(\n    storeName: StoreNames, \n    indexName: string, \n    query?: IDBValidKey | IDBKeyRange\n  ): Promise<T[]> {\n    const store = await this.tx(storeName);\n    const index = store.index(indexName);\n    return new Promise((resolve, reject) => {\n      const request = query ? index.getAll(query) : index.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async clear(storeName: StoreNames): Promise<void> {\n    const store = await this.tx(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.clear();\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n\nexport const idb = new IDB();","import { idb } from './idb';\nimport { Program, Day, SeedData } from './types';\n\nexport class ProgramManager {\n  private static instance: ProgramManager;\n  \n  private constructor() {}\n  \n  static getInstance(): ProgramManager {\n    if (!ProgramManager.instance) {\n      ProgramManager.instance = new ProgramManager();\n    }\n    return ProgramManager.instance;\n  }\n\n  async initialize(): Promise<void> {\n    // Load seed data from TypeScript module\n    const { seedData } = await import('./data/seed-data');\n    \n    // Check if data already exists\n    const existingProgram = await idb.get<Program>('programs', seedData.programId);\n    \n    if (!existingProgram) {\n      await this.loadSeedData(seedData);\n    }\n  }\n\n  private async loadSeedData(seedData: SeedData): Promise<void> {\n    // Load program\n    const program: Program = {\n      programId: seedData.programId,\n      title: seedData.title\n    };\n    await idb.put('programs', program);\n\n    // Load days\n    for (const day of seedData.days) {\n      await idb.put('days', day);\n    }\n    \n    console.log('Seed data loaded successfully');\n  }\n\n  async getProgram(programId: string): Promise<Program | undefined> {\n    return await idb.get<Program>('programs', programId);\n  }\n\n  async getDaysForProgram(programId: string): Promise<Day[]> {\n    return await idb.indexGetAll<Day>('days', 'programId', programId);\n  }\n\n  async getDay(dayId: string): Promise<Day | undefined> {\n    return await idb.get<Day>('days', dayId);\n  }\n\n  async getAllDays(): Promise<Day[]> {\n    const days = await idb.getAll<Day>('days');\n    return days.sort((a, b) => a.order - b.order);\n  }\n}\n\nexport const programManager = ProgramManager.getInstance();","import { Day } from '../types';\nimport { programManager } from '../program';\n\nexport class ViewHome extends HTMLElement {\n  private days: Day[] = [];\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  async connectedCallback() {\n    this.days = await programManager.getAllDays();\n    this.render();\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          padding: 16px;\n        }\n\n        h1 {\n          font-size: 28px;\n          font-weight: 700;\n          margin: 0 0 8px 0;\n          color: var(--text-primary);\n        }\n\n        .subtitle {\n          font-size: 16px;\n          color: var(--text-secondary);\n          margin-bottom: 32px;\n        }\n\n        .day-cards {\n          display: flex;\n          flex-direction: column;\n          gap: 16px;\n        }\n\n        .day-card {\n          background: var(--bg-secondary);\n          border-radius: 12px;\n          padding: 20px;\n          cursor: pointer;\n          border: 2px solid transparent;\n          transition: all 0.2s;\n        }\n\n        .day-card:hover {\n          border-color: var(--accent);\n          transform: translateY(-2px);\n        }\n\n        .day-number {\n          display: inline-block;\n          width: 32px;\n          height: 32px;\n          background: var(--accent);\n          color: white;\n          border-radius: 8px;\n          text-align: center;\n          line-height: 32px;\n          font-weight: 600;\n          margin-bottom: 12px;\n        }\n\n        .day-title {\n          font-size: 18px;\n          font-weight: 600;\n          color: var(--text-primary);\n          margin-bottom: 8px;\n        }\n\n        .day-summary {\n          font-size: 14px;\n          color: var(--text-secondary);\n          line-height: 1.5;\n        }\n\n        .day-blocks {\n          display: flex;\n          gap: 8px;\n          margin-top: 12px;\n          flex-wrap: wrap;\n        }\n\n        .block-badge {\n          background: var(--bg-primary);\n          color: var(--text-secondary);\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 11px;\n          font-weight: 500;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n        }\n\n        :host {\n          --bg-primary: #000000;\n          --bg-secondary: #1a1a1a;\n          --text-primary: #ffffff;\n          --text-secondary: #999999;\n          --border: #333333;\n          --accent: #007AFF;\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n          }\n        }\n      </style>\n\n      <h1>Minimalift</h1>\n      <div class=\"subtitle\">3-Day Full Body Program</div>\n      \n      <div class=\"day-cards\">\n        ${this.days.map(day => this.renderDayCard(day)).join('')}\n      </div>\n    `;\n\n    // Add click handlers\n    this.shadowRoot.querySelectorAll('.day-card').forEach(card => {\n      card.addEventListener('click', (e) => {\n        const dayId = (e.currentTarget as HTMLElement).dataset.dayId;\n        if (dayId) {\n          this.dispatchEvent(new CustomEvent('navigate-to-day', {\n            detail: { dayId },\n            bubbles: true,\n            composed: true\n          }));\n        }\n      });\n    });\n  }\n\n  private renderDayCard(day: Day): string {\n    const blockTypes = [...new Set(day.blocks.map(b => b.type))];\n    const exerciseCount = day.blocks.reduce((sum, block) => sum + block.exercises.length, 0);\n\n    return `\n      <div class=\"day-card\" data-day-id=\"${day.dayId}\">\n        <div class=\"day-number\">${day.order}</div>\n        <div class=\"day-title\">${day.title}</div>\n        <div class=\"day-summary\">${exerciseCount} exercises • ${day.blocks.length} blocks</div>\n        \n        <div class=\"day-blocks\">\n          ${blockTypes.map(type => `<span class=\"block-badge\">${type}</span>`).join('')}\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('view-home', ViewHome);","import { Day, Block, Exercise } from '../types';\nimport { programManager } from '../program';\n\nexport class ViewDay extends HTMLElement {\n  private day: Day | null = null;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  async loadDay(dayId: string) {\n    this.day = await programManager.getDay(dayId) || null;\n    this.render();\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n\n    if (!this.day) {\n      this.shadowRoot.innerHTML = '<p>Loading...</p>';\n      return;\n    }\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          padding: 16px;\n          padding-bottom: 120px; /* Extra space for fixed button */\n          box-sizing: border-box;\n        }\n\n        h2 {\n          font-size: 24px;\n          font-weight: 600;\n          margin: 0 0 24px 0;\n          color: var(--text-primary);\n        }\n\n        .block {\n          margin-bottom: 32px;\n          background: var(--bg-secondary);\n          border-radius: 12px;\n          padding: 16px;\n        }\n\n        .block-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: 16px;\n        }\n\n        .block-title {\n          font-size: 14px;\n          font-weight: 600;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n          color: var(--text-secondary);\n        }\n\n        .timer-badge {\n          background: var(--accent);\n          color: white;\n          padding: 4px 8px;\n          border-radius: 4px;\n          font-size: 12px;\n          font-weight: 500;\n        }\n\n        .exercise {\n          background: var(--bg-primary);\n          border-radius: 8px;\n          padding: 12px;\n          margin-bottom: 8px;\n        }\n\n        .exercise:last-child {\n          margin-bottom: 0;\n        }\n\n        .exercise-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n\n        .exercise-name {\n          font-size: 16px;\n          font-weight: 500;\n          color: var(--text-primary);\n        }\n\n        .exercise-sets-reps {\n          font-size: 14px;\n          color: var(--accent);\n          font-weight: 500;\n        }\n\n        .exercise-cues {\n          font-size: 13px;\n          color: var(--text-secondary);\n          line-height: 1.4;\n          margin-top: 4px;\n        }\n\n        .substitutes {\n          display: flex;\n          gap: 8px;\n          margin-top: 8px;\n          flex-wrap: wrap;\n        }\n\n        .substitute-chip {\n          background: var(--bg-secondary);\n          color: var(--text-secondary);\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 12px;\n          border: 1px solid var(--border);\n          cursor: pointer;\n        }\n\n        .substitute-chip:hover {\n          background: var(--accent);\n          color: white;\n          border-color: var(--accent);\n        }\n\n        .block-notes {\n          background: var(--bg-primary);\n          border-radius: 8px;\n          padding: 12px;\n          margin-top: 12px;\n          font-size: 13px;\n          color: var(--text-secondary);\n          line-height: 1.5;\n        }\n\n        .start-session-btn {\n          position: fixed;\n          bottom: 24px;\n          left: 50%;\n          transform: translateX(-50%);\n          background: var(--accent);\n          color: white;\n          border: none;\n          padding: 16px 32px;\n          border-radius: 24px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          box-shadow: 0 4px 12px rgba(0, 122, 255, 0.3);\n          z-index: 100;\n        }\n\n        :host {\n          --bg-primary: #000000;\n          --bg-secondary: #1a1a1a;\n          --text-primary: #ffffff;\n          --text-secondary: #999999;\n          --border: #333333;\n          --accent: #007AFF;\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n          }\n        }\n      </style>\n\n      <h2>${this.day.title}</h2>\n      \n      ${this.day.blocks.map(block => this.renderBlock(block)).join('')}\n      \n      <button class=\"start-session-btn\" data-day-id=\"${this.day.dayId}\">\n        Start Session\n      </button>\n    `;\n\n    // Add event listeners\n    this.shadowRoot.querySelector('.start-session-btn')?.addEventListener('click', (e) => {\n      const btn = e.target as HTMLButtonElement;\n      const dayId = btn.dataset.dayId;\n      if (dayId) {\n        this.dispatchEvent(new CustomEvent('start-session', { \n          detail: { dayId },\n          bubbles: true,\n          composed: true\n        }));\n      }\n    });\n\n    // Add substitute click handlers\n    this.shadowRoot.querySelectorAll('.substitute-chip').forEach(chip => {\n      chip.addEventListener('click', (e) => {\n        const el = e.target as HTMLElement;\n        const exerciseId = el.dataset.exerciseId;\n        const substitute = el.dataset.substitute;\n        if (exerciseId && substitute) {\n          console.log('Switch to substitute:', substitute, 'for exercise:', exerciseId);\n          // TODO: Implement substitute switching\n        }\n      });\n    });\n  }\n\n  private renderBlock(block: Block): string {\n    const timerLabel = this.getTimerLabel(block.timerMode);\n    \n    return `\n      <div class=\"block\">\n        <div class=\"block-header\">\n          <span class=\"block-title\">${this.getBlockTitle(block.type)}</span>\n          ${timerLabel ? `<span class=\"timer-badge\">${timerLabel}</span>` : ''}\n        </div>\n        \n        ${block.exercises.map(exercise => this.renderExercise(exercise)).join('')}\n        \n        ${block.notes ? `<div class=\"block-notes\">${block.notes}</div>` : ''}\n      </div>\n    `;\n  }\n\n  private renderExercise(exercise: Exercise): string {\n    const setsReps = exercise.sets ? `${exercise.sets} × ${exercise.reps}` : exercise.reps;\n    \n    return `\n      <div class=\"exercise\">\n        <div class=\"exercise-header\">\n          <span class=\"exercise-name\">${exercise.name}</span>\n          <span class=\"exercise-sets-reps\">${setsReps}</span>\n        </div>\n        \n        ${exercise.cues ? `<div class=\"exercise-cues\">${exercise.cues}</div>` : ''}\n        \n        ${exercise.substitutes && exercise.substitutes.length > 0 ? `\n          <div class=\"substitutes\">\n            ${exercise.substitutes.map(sub => `\n              <span class=\"substitute-chip\" \n                    data-exercise-id=\"${exercise.id}\" \n                    data-substitute=\"${sub}\">\n                ${sub}\n              </span>\n            `).join('')}\n          </div>\n        ` : ''}\n      </div>\n    `;\n  }\n\n  private getBlockTitle(type: string): string {\n    const titles: Record<string, string> = {\n      warmup: 'Warm Up',\n      strength: 'Strength & Condition',\n      swole: 'Swole & Flexy',\n      accessory: 'Accessories'\n    };\n    return titles[type] || type;\n  }\n\n  private getTimerLabel(timerMode: string): string {\n    const labels: Record<string, string> = {\n      emom: 'EMOM',\n      e2mom: 'E2MOM',\n      e4mom: 'E4MOM',\n      n90: 'N90',\n      fixed_rest: 'Rest Timer',\n      timed_circuit: 'Circuit'\n    };\n    return labels[timerMode] || '';\n  }\n}\n\ncustomElements.define('view-day', ViewDay);","export type TimerState = 'idle' | 'running' | 'paused' | 'completed';\n\nexport interface TimerEvent {\n  type: 'tick' | 'roundComplete' | 'complete' | 'stateChange';\n  elapsed: number;\n  remaining: number;\n  round?: number;\n  totalRounds?: number;\n  state: TimerState;\n}\n\nexport type TimerCallback = (event: TimerEvent) => void;\n\nexport abstract class BaseTimer {\n  protected startTime: number = 0;\n  protected pausedTime: number = 0;\n  protected totalPausedDuration: number = 0;\n  protected intervalId: number | null = null;\n  protected state: TimerState = 'idle';\n  protected callbacks: TimerCallback[] = [];\n\n  constructor(protected readonly tickInterval: number = 100) {}\n\n  abstract getDuration(): number;\n  abstract getCurrentRound(): number;\n  abstract getTotalRounds(): number;\n  abstract getTimeInCurrentPeriod(): number;\n  abstract getRemainingInCurrentPeriod(): number;\n\n  start(): void {\n    if (this.state === 'running') return;\n\n    if (this.state === 'paused') {\n      // Resume from pause\n      this.totalPausedDuration += performance.now() - this.pausedTime;\n    } else {\n      // Fresh start\n      this.startTime = performance.now();\n      this.totalPausedDuration = 0;\n    }\n\n    this.state = 'running';\n    this.intervalId = window.setInterval(() => this.tick(), this.tickInterval);\n    this.notifyStateChange();\n  }\n\n  pause(): void {\n    if (this.state !== 'running') return;\n\n    this.state = 'paused';\n    this.pausedTime = performance.now();\n    \n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    \n    this.notifyStateChange();\n  }\n\n  reset(): void {\n    this.stop();\n    this.state = 'idle';\n    this.startTime = 0;\n    this.pausedTime = 0;\n    this.totalPausedDuration = 0;\n    this.notifyStateChange();\n  }\n\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  getState(): TimerState {\n    return this.state;\n  }\n\n  getElapsedTime(): number {\n    if (this.startTime === 0) return 0;\n\n    const now = this.state === 'paused' ? this.pausedTime : performance.now();\n    return now - this.startTime - this.totalPausedDuration;\n  }\n\n  addCallback(callback: TimerCallback): void {\n    this.callbacks.push(callback);\n  }\n\n  removeCallback(callback: TimerCallback): void {\n    const index = this.callbacks.indexOf(callback);\n    if (index > -1) {\n      this.callbacks.splice(index, 1);\n    }\n  }\n\n  protected tick(): void {\n    const elapsed = this.getElapsedTime();\n    const remainingInPeriod = this.getRemainingInCurrentPeriod();\n    const currentRound = this.getCurrentRound();\n    const totalRounds = this.getTotalRounds();\n\n    // Check if timer is complete\n    if (elapsed >= this.getDuration()) {\n      this.state = 'completed';\n      this.stop();\n      \n      this.notifyCallbacks({\n        type: 'complete',\n        elapsed,\n        remaining: 0,\n        round: currentRound,\n        totalRounds,\n        state: this.state\n      });\n      return;\n    }\n\n    // Check for round completion (depends on timer type)\n    const previousRound = this.getPreviousRound(elapsed - this.tickInterval);\n    if (currentRound > previousRound && previousRound > 0) {\n      this.notifyCallbacks({\n        type: 'roundComplete',\n        elapsed,\n        remaining: remainingInPeriod,\n        round: previousRound,\n        totalRounds,\n        state: this.state\n      });\n    }\n\n    // Regular tick update\n    this.notifyCallbacks({\n      type: 'tick',\n      elapsed,\n      remaining: remainingInPeriod,\n      round: currentRound,\n      totalRounds,\n      state: this.state\n    });\n  }\n\n  protected abstract getPreviousRound(elapsed: number): number;\n\n  protected notifyCallbacks(event: TimerEvent): void {\n    this.callbacks.forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Timer callback error:', error);\n      }\n    });\n  }\n\n  protected notifyStateChange(): void {\n    const elapsed = this.getElapsedTime();\n    this.notifyCallbacks({\n      type: 'stateChange',\n      elapsed,\n      remaining: this.getRemainingInCurrentPeriod(),\n      round: this.getCurrentRound(),\n      totalRounds: this.getTotalRounds(),\n      state: this.state\n    });\n  }\n\n  // Utility methods for time formatting\n  static formatTime(milliseconds: number): string {\n    const totalSeconds = Math.max(0, Math.ceil(milliseconds / 1000));\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }\n\n  static formatTimeWithMs(milliseconds: number): string {\n    const totalMs = Math.max(0, milliseconds);\n    const seconds = Math.floor(totalMs / 1000);\n    const ms = Math.floor((totalMs % 1000) / 100);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}.${ms}`;\n  }\n}","import { BaseTimer } from './timer-engine';\n\n/**\n * EMOM Timer - Every Minute on the Minute\n * Also supports E2MOM (Every 2 Minutes) and E4MOM (Every 4 Minutes)\n */\nexport class EMOMTimer extends BaseTimer {\n  constructor(\n    private readonly periodDurationMs: number,\n    private readonly totalRounds: number\n  ) {\n    super(100); // 100ms tick interval for smooth updates\n  }\n\n  getDuration(): number {\n    return this.periodDurationMs * this.totalRounds;\n  }\n\n  getCurrentRound(): number {\n    const elapsed = this.getElapsedTime();\n    return Math.floor(elapsed / this.periodDurationMs) + 1;\n  }\n\n  getTotalRounds(): number {\n    return this.totalRounds;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    return elapsed % this.periodDurationMs;\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    return this.periodDurationMs - this.getTimeInCurrentPeriod();\n  }\n\n  protected getPreviousRound(elapsed: number): number {\n    return Math.floor(elapsed / this.periodDurationMs) + 1;\n  }\n\n  // Helper methods for getting period info\n  getPeriodDuration(): number {\n    return this.periodDurationMs;\n  }\n\n  getRemainingTotal(): number {\n    return this.getDuration() - this.getElapsedTime();\n  }\n\n  getProgress(): number {\n    const elapsed = this.getElapsedTime();\n    return Math.min(elapsed / this.getDuration(), 1);\n  }\n\n  getPeriodProgress(): number {\n    const timeInPeriod = this.getTimeInCurrentPeriod();\n    return Math.min(timeInPeriod / this.periodDurationMs, 1);\n  }\n\n  // Convenience factory methods\n  static createEMOM(rounds: number): EMOMTimer {\n    return new EMOMTimer(60 * 1000, rounds); // 60 seconds\n  }\n\n  static createE2MOM(rounds: number): EMOMTimer {\n    return new EMOMTimer(2 * 60 * 1000, rounds); // 120 seconds\n  }\n\n  static createE4MOM(rounds: number): EMOMTimer {\n    return new EMOMTimer(4 * 60 * 1000, rounds); // 240 seconds\n  }\n\n  static createCustom(periodSeconds: number, rounds: number): EMOMTimer {\n    return new EMOMTimer(periodSeconds * 1000, rounds);\n  }\n}","import { BaseTimer } from './timer-engine';\n\n/**\n * N90 Timer - Every 90 seconds for 5 sets\n * Used for specific strength exercises in the Minimalift program\n */\nexport class N90Timer extends BaseTimer {\n  private readonly periodDurationMs = 90 * 1000; // 90 seconds\n\n  constructor(private readonly totalRounds: number = 5) {\n    super(100); // 100ms tick interval\n  }\n\n  getDuration(): number {\n    return this.periodDurationMs * this.totalRounds;\n  }\n\n  getCurrentRound(): number {\n    const elapsed = this.getElapsedTime();\n    return Math.floor(elapsed / this.periodDurationMs) + 1;\n  }\n\n  getTotalRounds(): number {\n    return this.totalRounds;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    return elapsed % this.periodDurationMs;\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    return this.periodDurationMs - this.getTimeInCurrentPeriod();\n  }\n\n  protected getPreviousRound(elapsed: number): number {\n    return Math.floor(elapsed / this.periodDurationMs) + 1;\n  }\n\n  // Helper methods\n  getPeriodDuration(): number {\n    return this.periodDurationMs;\n  }\n\n  getRemainingTotal(): number {\n    return this.getDuration() - this.getElapsedTime();\n  }\n\n  getProgress(): number {\n    const elapsed = this.getElapsedTime();\n    return Math.min(elapsed / this.getDuration(), 1);\n  }\n\n  getPeriodProgress(): number {\n    const timeInPeriod = this.getTimeInCurrentPeriod();\n    return Math.min(timeInPeriod / this.periodDurationMs, 1);\n  }\n\n  // Check if we're in the work phase (first 30s) or rest phase (remaining 60s)\n  isInWorkPhase(): boolean {\n    const timeInPeriod = this.getTimeInCurrentPeriod();\n    return timeInPeriod < 30 * 1000; // First 30 seconds are work\n  }\n\n  getWorkPhaseRemaining(): number {\n    if (!this.isInWorkPhase()) return 0;\n    return 30 * 1000 - this.getTimeInCurrentPeriod();\n  }\n\n  getRestPhaseRemaining(): number {\n    if (this.isInWorkPhase()) return 60 * 1000; // Full rest period ahead\n    return this.getRemainingInCurrentPeriod();\n  }\n\n  getCurrentPhase(): 'work' | 'rest' {\n    return this.isInWorkPhase() ? 'work' : 'rest';\n  }\n\n  // Factory method\n  static create(rounds: number = 5): N90Timer {\n    return new N90Timer(rounds);\n  }\n}","import { BaseTimer } from './timer-engine';\n\n/**\n * Fixed Rest Timer - Simple countdown timer for rest periods\n */\nexport class FixedRestTimer extends BaseTimer {\n  constructor(private readonly durationMs: number) {\n    super(100); // 100ms tick interval\n  }\n\n  getDuration(): number {\n    return this.durationMs;\n  }\n\n  getCurrentRound(): number {\n    return 1; // Single round\n  }\n\n  getTotalRounds(): number {\n    return 1;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    return this.getElapsedTime();\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    return this.durationMs - this.getElapsedTime();\n  }\n\n  protected getPreviousRound(): number {\n    return 1;\n  }\n\n  // Helper methods\n  getRemaining(): number {\n    return Math.max(0, this.durationMs - this.getElapsedTime());\n  }\n\n  getProgress(): number {\n    const elapsed = this.getElapsedTime();\n    return Math.min(elapsed / this.durationMs, 1);\n  }\n\n  // Factory methods\n  static create(seconds: number): FixedRestTimer {\n    return new FixedRestTimer(seconds * 1000);\n  }\n\n  static createMinutes(minutes: number): FixedRestTimer {\n    return new FixedRestTimer(minutes * 60 * 1000);\n  }\n}\n\n/**\n * Timed Circuit Timer - Multiple exercises with set work/rest periods\n */\nexport class TimedCircuitTimer extends BaseTimer {\n  constructor(\n    private readonly workDurationMs: number,\n    private readonly restDurationMs: number,\n    private readonly totalRounds: number\n  ) {\n    super(100);\n  }\n\n  getDuration(): number {\n    return (this.workDurationMs + this.restDurationMs) * this.totalRounds;\n  }\n\n  getCurrentRound(): number {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = this.workDurationMs + this.restDurationMs;\n    return Math.floor(elapsed / periodDuration) + 1;\n  }\n\n  getTotalRounds(): number {\n    return this.totalRounds;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = this.workDurationMs + this.restDurationMs;\n    return elapsed % periodDuration;\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    const timeInPeriod = this.getTimeInCurrentPeriod();\n    \n    if (this.isInWorkPhase()) {\n      return this.workDurationMs - timeInPeriod;\n    } else {\n      return (this.workDurationMs + this.restDurationMs) - timeInPeriod;\n    }\n  }\n\n  protected getPreviousRound(elapsed: number): number {\n    const periodDuration = this.workDurationMs + this.restDurationMs;\n    return Math.floor(elapsed / periodDuration) + 1;\n  }\n\n  // Circuit-specific methods\n  isInWorkPhase(): boolean {\n    const timeInPeriod = this.getTimeInCurrentPeriod();\n    return timeInPeriod < this.workDurationMs;\n  }\n\n  getCurrentPhase(): 'work' | 'rest' {\n    return this.isInWorkPhase() ? 'work' : 'rest';\n  }\n\n  getWorkDuration(): number {\n    return this.workDurationMs;\n  }\n\n  getRestDuration(): number {\n    return this.restDurationMs;\n  }\n\n  getWorkPhaseRemaining(): number {\n    if (!this.isInWorkPhase()) return 0;\n    return this.workDurationMs - this.getTimeInCurrentPeriod();\n  }\n\n  getRestPhaseRemaining(): number {\n    if (this.isInWorkPhase()) return this.restDurationMs;\n    const timeInPeriod = this.getTimeInCurrentPeriod();\n    return (this.workDurationMs + this.restDurationMs) - timeInPeriod;\n  }\n\n  getProgress(): number {\n    const elapsed = this.getElapsedTime();\n    return Math.min(elapsed / this.getDuration(), 1);\n  }\n\n  getPeriodProgress(): number {\n    const timeInPeriod = this.getTimeInCurrentPeriod();\n    const periodDuration = this.workDurationMs + this.restDurationMs;\n    return Math.min(timeInPeriod / periodDuration, 1);\n  }\n\n  // Factory methods\n  static create(workSeconds: number, restSeconds: number, rounds: number): TimedCircuitTimer {\n    return new TimedCircuitTimer(workSeconds * 1000, restSeconds * 1000, rounds);\n  }\n\n  static createTabata(rounds: number = 8): TimedCircuitTimer {\n    return new TimedCircuitTimer(20 * 1000, 10 * 1000, rounds); // 20s work, 10s rest\n  }\n\n  static createCustom(workMs: number, restMs: number, rounds: number): TimedCircuitTimer {\n    return new TimedCircuitTimer(workMs, restMs, rounds);\n  }\n}","/**\n * Wake Lock utility for keeping the screen active during workouts\n */\nexport class WakeLockManager {\n  private wakeLock: WakeLockSentinel | null = null;\n  private supported = 'wakeLock' in navigator;\n\n  /**\n   * Request a wake lock to prevent screen from sleeping\n   */\n  async acquire(): Promise<boolean> {\n    if (!this.supported) {\n      console.warn('Wake Lock API not supported');\n      return false;\n    }\n\n    try {\n      if (this.wakeLock) {\n        // Already have an active wake lock\n        return true;\n      }\n\n      this.wakeLock = await (navigator as any).wakeLock.request('screen');\n      \n      this.wakeLock?.addEventListener('release', () => {\n        console.log('Wake lock released');\n        this.wakeLock = null;\n      });\n\n      console.log('Wake lock acquired');\n      return true;\n    } catch (err) {\n      console.error('Failed to acquire wake lock:', err);\n      return false;\n    }\n  }\n\n  /**\n   * Release the current wake lock\n   */\n  async release(): Promise<void> {\n    if (this.wakeLock) {\n      try {\n        await this.wakeLock.release();\n        this.wakeLock = null;\n        console.log('Wake lock released manually');\n      } catch (err) {\n        console.error('Failed to release wake lock:', err);\n      }\n    }\n  }\n\n  /**\n   * Check if wake lock is currently active\n   */\n  isActive(): boolean {\n    return this.wakeLock !== null && !this.wakeLock.released;\n  }\n\n  /**\n   * Check if wake lock API is supported\n   */\n  isSupportedApi(): boolean {\n    return this.supported;\n  }\n\n  /**\n   * Re-acquire wake lock if it was lost (e.g., after tab became inactive)\n   */\n  async reacquire(): Promise<boolean> {\n    if (this.wakeLock && this.wakeLock.released) {\n      this.wakeLock = null;\n      return await this.acquire();\n    }\n    return this.isActive();\n  }\n}\n\nexport const wakeLockManager = new WakeLockManager();","/**\n * Background timer management to handle app going background/foreground\n */\nexport class BackgroundTimerManager {\n  private backgroundStartTime: number | null = null;\n  private callbacks: (() => void)[] = [];\n\n  constructor() {\n    this.setupVisibilityHandlers();\n  }\n\n  private setupVisibilityHandlers() {\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.handleBackground();\n      } else {\n        this.handleForeground();\n      }\n    });\n\n    // Also handle page focus/blur for better coverage\n    window.addEventListener('blur', () => {\n      if (!document.hidden) {\n        this.handleBackground();\n      }\n    });\n\n    window.addEventListener('focus', () => {\n      if (!document.hidden) {\n        this.handleForeground();\n      }\n    });\n  }\n\n  private handleBackground() {\n    console.log('App went to background');\n    this.backgroundStartTime = performance.now();\n    \n    // Show a notification if permissions are granted and we have an active timer\n    this.maybeShowNotification();\n  }\n\n  private handleForeground() {\n    if (this.backgroundStartTime !== null) {\n      const timeInBackground = performance.now() - this.backgroundStartTime;\n      console.log(`App returned to foreground after ${timeInBackground}ms`);\n      \n      this.backgroundStartTime = null;\n      \n      // Notify callbacks that we're back in foreground\n      this.callbacks.forEach(callback => {\n        try {\n          callback();\n        } catch (error) {\n          console.error('Background timer callback error:', error);\n        }\n      });\n    }\n  }\n\n  private async maybeShowNotification() {\n    // Check if we have notification permission\n    if ('Notification' in window && Notification.permission === 'granted') {\n      // Only show if we have an active workout session\n      const isSessionActive = this.callbacks.length > 0;\n      \n      if (isSessionActive) {\n        try {\n          const notification = new Notification('Minimalift Workout Active', {\n            body: 'Your workout timer is still running in the background.',\n            icon: '/icons/icon-192x192.png',\n            badge: '/icons/icon-192x192.png',\n            tag: 'workout-active',\n            requireInteraction: false,\n            silent: true\n          });\n\n          // Auto-close after 5 seconds\n          setTimeout(() => notification.close(), 5000);\n        } catch (error) {\n          console.error('Failed to show notification:', error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a callback to be notified when app returns to foreground\n   */\n  addForegroundCallback(callback: () => void) {\n    this.callbacks.push(callback);\n  }\n\n  /**\n   * Remove a foreground callback\n   */\n  removeForegroundCallback(callback: () => void) {\n    const index = this.callbacks.indexOf(callback);\n    if (index > -1) {\n      this.callbacks.splice(index, 1);\n    }\n  }\n\n  /**\n   * Get time spent in background (if currently in background)\n   */\n  getTimeInBackground(): number {\n    if (this.backgroundStartTime !== null) {\n      return performance.now() - this.backgroundStartTime;\n    }\n    return 0;\n  }\n\n  /**\n   * Check if app is currently in background\n   */\n  isInBackground(): boolean {\n    return document.hidden;\n  }\n\n  /**\n   * Request notification permission if not already granted\n   */\n  async requestNotificationPermission(): Promise<boolean> {\n    if (!('Notification' in window)) {\n      console.warn('Notifications not supported');\n      return false;\n    }\n\n    if (Notification.permission === 'granted') {\n      return true;\n    }\n\n    if (Notification.permission === 'denied') {\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    } catch (error) {\n      console.error('Failed to request notification permission:', error);\n      return false;\n    }\n  }\n}\n\nexport const backgroundTimerManager = new BackgroundTimerManager();","/**\n * Haptic and audio feedback utilities for workout timers\n */\nexport class FeedbackManager {\n  private audioContext: AudioContext | null = null;\n  private enableHaptic = true;\n  private enableAudio = true;\n\n  constructor() {\n    // Initialize audio context on first user interaction\n    document.addEventListener('touchstart', this.initAudioContext.bind(this), { once: true });\n    document.addEventListener('click', this.initAudioContext.bind(this), { once: true });\n  }\n\n  private initAudioContext() {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      console.log('Audio context initialized');\n    } catch (error) {\n      console.warn('Audio context not supported:', error);\n    }\n  }\n\n  /**\n   * Enable or disable haptic feedback\n   */\n  setHapticEnabled(enabled: boolean) {\n    this.enableHaptic = enabled;\n  }\n\n  /**\n   * Enable or disable audio feedback  \n   */\n  setAudioEnabled(enabled: boolean) {\n    this.enableAudio = enabled;\n  }\n\n  /**\n   * Check if haptic feedback is supported\n   */\n  isHapticSupported(): boolean {\n    return 'vibrate' in navigator;\n  }\n\n  /**\n   * Check if audio feedback is supported\n   */\n  isAudioSupported(): boolean {\n    return this.audioContext !== null;\n  }\n\n  /**\n   * Provide haptic feedback\n   */\n  vibrate(pattern: number | number[]) {\n    if (!this.enableHaptic || !this.isHapticSupported()) {\n      return;\n    }\n\n    try {\n      navigator.vibrate(pattern);\n    } catch (error) {\n      console.warn('Vibration failed:', error);\n    }\n  }\n\n  /**\n   * Play a beep sound\n   */\n  beep(frequency: number = 800, duration: number = 200, volume: number = 0.1) {\n    if (!this.enableAudio || !this.audioContext) {\n      return;\n    }\n\n    try {\n      const oscillator = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n\n      oscillator.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n\n      oscillator.frequency.value = frequency;\n      oscillator.type = 'sine';\n      \n      gainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration / 1000);\n\n      oscillator.start();\n      oscillator.stop(this.audioContext.currentTime + duration / 1000);\n    } catch (error) {\n      console.warn('Audio playback failed:', error);\n    }\n  }\n\n  /**\n   * Timer start feedback\n   */\n  timerStart() {\n    this.vibrate(100);\n    this.beep(600, 150);\n  }\n\n  /**\n   * Timer pause feedback\n   */\n  timerPause() {\n    this.vibrate([50, 50, 50]);\n    this.beep(400, 100);\n  }\n\n  /**\n   * Round complete feedback\n   */\n  roundComplete() {\n    this.vibrate([100, 50, 100]);\n    this.beep(800, 200);\n  }\n\n  /**\n   * Exercise complete feedback\n   */\n  exerciseComplete() {\n    this.vibrate([150, 100, 150, 100, 150]);\n    this.playSuccess();\n  }\n\n  /**\n   * Session complete feedback\n   */\n  sessionComplete() {\n    this.vibrate([200, 100, 200, 100, 200, 100, 300]);\n    this.playSuccessChord();\n  }\n\n  /**\n   * Set complete feedback\n   */\n  setComplete() {\n    this.vibrate([100, 50, 100]);\n    this.beep(700, 150);\n  }\n\n  /**\n   * Rest start feedback (between sets)\n   */\n  restStart() {\n    this.vibrate(80);\n    this.beep(500, 150);\n  }\n\n  /**\n   * Rest complete feedback\n   */\n  restComplete() {\n    this.vibrate([50, 30, 50]);\n    this.beep(800, 100);\n  }\n\n  /**\n   * Work period start feedback (for circuits/N90)\n   */\n  workPeriodStart() {\n    this.vibrate([50, 30, 50]);\n    this.beep(1000, 100);\n  }\n\n  /**\n   * Rest period start feedback\n   */\n  restPeriodStart() {\n    this.vibrate(80);\n    this.beep(500, 150);\n  }\n\n  /**\n   * Countdown warning (last 3 seconds)\n   */\n  countdownWarning() {\n    this.vibrate(50);\n    this.beep(700, 100);\n  }\n\n  /**\n   * Play success sound (ascending notes)\n   */\n  private playSuccess() {\n    if (!this.audioContext) return;\n    \n    const notes = [523, 659, 784]; // C, E, G\n    notes.forEach((freq, index) => {\n      setTimeout(() => {\n        this.beep(freq, 200, 0.08);\n      }, index * 100);\n    });\n  }\n\n  /**\n   * Play success chord for session completion\n   */\n  private playSuccessChord() {\n    if (!this.audioContext) return;\n    \n    // Play a major chord\n    const chord = [523, 659, 784]; // C, E, G\n    chord.forEach(freq => {\n      this.beep(freq, 500, 0.05);\n    });\n  }\n\n  /**\n   * Test all feedback types\n   */\n  testFeedback() {\n    console.log('Testing feedback...');\n    \n    setTimeout(() => this.timerStart(), 0);\n    setTimeout(() => this.workPeriodStart(), 1000);\n    setTimeout(() => this.countdownWarning(), 2000);\n    setTimeout(() => this.restPeriodStart(), 3000);\n    setTimeout(() => this.roundComplete(), 4000);\n    setTimeout(() => this.exerciseComplete(), 5000);\n  }\n}\n\nexport const feedbackManager = new FeedbackManager();","import { BaseTimer, TimerEvent } from '../timers/timer-engine';\nimport { EMOMTimer } from '../timers/emom';\nimport { N90Timer } from '../timers/n90';\nimport { FixedRestTimer, TimedCircuitTimer } from '../timers/fixed-rest';\nimport { Day, Block, Exercise } from '../types';\nimport { wakeLockManager } from '../utils/wake-lock';\nimport { backgroundTimerManager } from '../utils/background-timer';\nimport { feedbackManager } from '../utils/feedback';\n\nexport class ViewSession extends HTMLElement {\n  private currentDay: Day | null = null;\n  private currentBlockIndex = 0;\n  private currentExerciseIndex = 0;\n  private currentSetIndex = 0; // Track current set within exercise\n  private currentTimer: BaseTimer | null = null;\n  private sessionStartTime: number = 0;\n  private foregroundCallback: (() => void) | null = null;\n  private lastPhase: string | null = null;\n  private isRestingBetweenSets = false; // Track if we're in rest period between sets\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n    this.setupBackgroundHandling();\n  }\n\n  disconnectedCallback() {\n    this.cleanup();\n  }\n\n  setDay(day: Day) {\n    this.currentDay = day;\n    this.currentBlockIndex = 0;\n    this.currentExerciseIndex = 0;\n    this.currentSetIndex = 0;\n    this.isRestingBetweenSets = false;\n    this.render();\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          height: 100%;\n          padding: 0;\n        }\n\n        .session-container {\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n          background: var(--bg-primary);\n        }\n\n        .session-header {\n          background: var(--bg-secondary);\n          padding: 16px;\n          border-bottom: 1px solid var(--border);\n          flex-shrink: 0;\n        }\n\n        .session-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n        }\n\n        .session-progress {\n          font-size: 14px;\n          color: var(--text-secondary);\n        }\n\n        .session-main {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n        }\n\n        .current-exercise {\n          background: var(--bg-secondary);\n          padding: 20px;\n          text-align: center;\n          flex-shrink: 0;\n        }\n\n        .exercise-name {\n          font-size: 24px;\n          font-weight: 700;\n          margin: 0 0 8px 0;\n          color: var(--accent);\n        }\n\n        .exercise-details {\n          font-size: 16px;\n          color: var(--text-secondary);\n          margin: 0 0 16px 0;\n        }\n\n        .timer-section {\n          background: var(--bg-primary);\n          padding: 32px 20px;\n          text-align: center;\n          flex-shrink: 0;\n        }\n\n        .timer-display {\n          font-size: 48px;\n          font-weight: 700;\n          font-variant-numeric: tabular-nums;\n          margin: 0 0 8px 0;\n          color: var(--text-primary);\n        }\n\n        .timer-phase {\n          font-size: 18px;\n          font-weight: 500;\n          margin: 0 0 8px 0;\n          color: var(--accent);\n        }\n\n        .timer-progress {\n          font-size: 14px;\n          color: var(--text-secondary);\n          margin: 0 0 24px 0;\n        }\n\n        .progress-bar {\n          width: 100%;\n          height: 4px;\n          background: var(--border);\n          border-radius: 2px;\n          margin: 16px 0;\n          overflow: hidden;\n        }\n\n        .progress-fill {\n          height: 100%;\n          background: var(--accent);\n          border-radius: 2px;\n          transition: width 0.1s ease;\n          width: 0%;\n        }\n\n        .session-controls {\n          padding: 20px;\n          display: flex;\n          gap: 12px;\n          justify-content: center;\n          flex-shrink: 0;\n        }\n\n        .control-btn {\n          padding: 12px 24px;\n          font-size: 16px;\n          font-weight: 600;\n          border: none;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.2s;\n          min-width: 100px;\n        }\n\n        .control-btn.primary {\n          background: var(--accent);\n          color: white;\n        }\n\n        .control-btn.secondary {\n          background: var(--bg-secondary);\n          color: var(--text-primary);\n          border: 1px solid var(--border);\n        }\n\n        .control-btn.warning {\n          background: var(--warning);\n          color: white;\n        }\n\n        .control-btn:disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n\n        .next-up {\n          padding: 16px 20px;\n          background: var(--bg-secondary);\n          border-top: 1px solid var(--border);\n          flex-shrink: 0;\n        }\n\n        .next-up-label {\n          font-size: 12px;\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n          margin: 0 0 4px 0;\n        }\n\n        .next-up-exercise {\n          font-size: 16px;\n          font-weight: 500;\n          margin: 0;\n        }\n\n        .session-empty {\n          flex: 1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          color: var(--text-secondary);\n          padding: 40px 20px;\n        }\n\n        .session-complete {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          padding: 40px 20px;\n        }\n\n        .complete-icon {\n          font-size: 64px;\n          margin: 0 0 16px 0;\n        }\n\n        .complete-title {\n          font-size: 24px;\n          font-weight: 700;\n          margin: 0 0 8px 0;\n        }\n\n        .complete-stats {\n          font-size: 16px;\n          color: var(--text-secondary);\n          margin: 0;\n        }\n\n        .session-save-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.7);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n        }\n\n        .session-save-dialog {\n          background: var(--bg-primary);\n          border: 1px solid var(--border);\n          border-radius: 16px;\n          padding: 32px;\n          margin: 16px;\n          text-align: center;\n          max-width: 400px;\n          width: 100%;\n          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n        }\n\n        .session-save-dialog h3 {\n          font-size: 24px;\n          font-weight: 700;\n          margin: 0 0 16px 0;\n          color: var(--text-primary);\n        }\n\n        .session-save-dialog p {\n          font-size: 16px;\n          color: var(--text-secondary);\n          margin: 0 0 8px 0;\n        }\n\n        .dialog-actions {\n          display: flex;\n          gap: 12px;\n          margin-top: 24px;\n        }\n\n        .discard-btn, .save-btn {\n          flex: 1;\n          padding: 12px 24px;\n          border: none;\n          border-radius: 8px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .discard-btn {\n          background: var(--bg-secondary);\n          color: var(--text-secondary);\n          border: 1px solid var(--border);\n        }\n\n        .discard-btn:hover {\n          background: var(--border);\n          color: var(--text-primary);\n        }\n\n        .save-btn {\n          background: var(--accent);\n          color: white;\n        }\n\n        .save-btn:hover {\n          opacity: 0.9;\n        }\n\n        .cancel-session-btn {\n          padding: 8px 16px;\n          background: var(--bg-primary);\n          color: var(--text-secondary);\n          border: 1px solid var(--border);\n          border-radius: 6px;\n          font-size: 14px;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .cancel-session-btn:hover {\n          background: var(--border);\n          color: var(--text-primary);\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host {\n            --bg-primary: #000000;\n            --bg-secondary: #1a1a1a;\n            --text-primary: #ffffff;\n            --text-secondary: #999999;\n            --border: #333333;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n      </style>\n\n      <div class=\"session-container\">\n        ${this.renderContent()}\n      </div>\n    `;\n  }\n\n  private renderContent(): string {\n    if (!this.currentDay) {\n      return `\n        <div class=\"session-empty\">\n          <div>\n            <h2>No Workout Selected</h2>\n            <p>Select a day to start your session</p>\n          </div>\n        </div>\n      `;\n    }\n\n    const currentBlock = this.getCurrentBlock();\n    if (!currentBlock) {\n      return this.renderSessionComplete();\n    }\n\n    const currentExercise = this.getCurrentExercise();\n    if (!currentExercise) {\n      return this.renderSessionComplete();\n    }\n\n    return `\n      ${this.renderHeader()}\n      <div class=\"session-main\">\n        ${this.renderCurrentExercise(currentExercise)}\n        ${this.renderTimer()}\n        ${this.renderControls()}\n        ${this.renderNextUp()}\n      </div>\n    `;\n  }\n\n  private renderHeader(): string {\n    if (!this.currentDay) return '';\n\n    const totalBlocks = this.currentDay.blocks.length;\n    const totalExercises = this.currentDay.blocks.reduce((sum, block) => sum + block.exercises.length, 0);\n    const completedExercises = this.currentBlockIndex * (this.currentDay.blocks[0]?.exercises.length || 0) + this.currentExerciseIndex;\n\n    return `\n      <div class=\"session-header\">\n        <div class=\"session-info\">\n          <div class=\"session-title\">${this.currentDay.title}</div>\n          <div class=\"session-progress\">\n            Block ${this.currentBlockIndex + 1} of ${totalBlocks} • \n            Exercise ${completedExercises + 1} of ${totalExercises}\n          </div>\n        </div>\n        <button class=\"cancel-session-btn\" id=\"cancel-session\">Cancel</button>\n      </div>\n    `;\n  }\n\n  private renderCurrentExercise(exercise: Exercise): string {\n    const block = this.getCurrentBlock();\n    if (!block) return '';\n\n    return `\n      <div class=\"current-exercise\">\n        <div class=\"exercise-name\">${exercise.name}</div>\n        <div class=\"exercise-details\">${this.formatExerciseDetails(exercise, block)}</div>\n      </div>\n    `;\n  }\n\n  private renderTimer(): string {\n    const exercise = this.getCurrentExercise();\n    const block = this.getCurrentBlock();\n    const hasBlockTimer = block?.timerMode && block.timerMode !== 'none';\n\n    // For exercises with set-based rest periods\n    if (!hasBlockTimer && exercise) {\n      const totalSets = exercise.sets || 1;\n      const setNumber = this.currentSetIndex + 1;\n\n      if (this.isRestingBetweenSets && this.currentTimer) {\n        const remaining = this.currentTimer.getRemainingInCurrentPeriod();\n        const timerDisplay = BaseTimer.formatTime(remaining);\n        const elapsed = this.currentTimer.getElapsedTime();\n        const duration = this.currentTimer.getDuration();\n        const progress = Math.min(elapsed / duration, 1);\n\n        return `\n          <div class=\"timer-section\">\n            <div class=\"timer-display\">${timerDisplay}</div>\n            <div class=\"timer-phase\">Rest after Set ${setNumber - 1}</div>\n            <div class=\"timer-progress\">Set ${setNumber}/${totalSets} next</div>\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" style=\"width: ${progress * 100}%\"></div>\n            </div>\n          </div>\n        `;\n      }\n\n      // Show set info when not resting\n      return `\n        <div class=\"timer-section\">\n          <div class=\"timer-display\">Set ${setNumber}/${totalSets}</div>\n          <div class=\"timer-phase\">${exercise.reps} reps</div>\n          ${exercise.restSec ? `<div class=\"timer-progress\">${exercise.restSec}s rest after set</div>` : ''}\n        </div>\n      `;\n    }\n\n    // Handle block-level timers (EMOM, Circuit, etc.)\n    if (!this.currentTimer) {\n      return `\n        <div class=\"timer-section\">\n          <div class=\"timer-display\">--:--</div>\n          <div class=\"timer-phase\">Ready to start</div>\n        </div>\n      `;\n    }\n\n    const remaining = this.currentTimer.getRemainingInCurrentPeriod();\n    const currentRound = this.currentTimer.getCurrentRound();\n    const totalRounds = this.currentTimer.getTotalRounds();\n\n    const timerDisplay = BaseTimer.formatTime(remaining);\n    const progress = this.getTimerProgress();\n    const phase = this.getTimerPhase();\n\n    return `\n      <div class=\"timer-section\">\n        <div class=\"timer-display\">${timerDisplay}</div>\n        <div class=\"timer-phase\">${phase}</div>\n        <div class=\"timer-progress\">Round ${currentRound} of ${totalRounds}</div>\n        <div class=\"progress-bar\">\n          <div class=\"progress-fill\" style=\"width: ${progress * 100}%\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  private renderControls(): string {\n    const block = this.getCurrentBlock();\n    const exercise = this.getCurrentExercise();\n    const hasBlockTimer = block?.timerMode && block.timerMode !== 'none';\n    \n    // Handle block-level timers (EMOM, Circuit, etc.)\n    if (hasBlockTimer) {\n      const timerState = this.currentTimer?.getState() || 'idle';\n      const isCompleted = timerState === 'completed';\n\n      let primaryButton = '';\n      if (!this.currentTimer || timerState === 'idle') {\n        primaryButton = `<button class=\"control-btn primary\" id=\"start-btn\">Start Timer</button>`;\n      } else if (timerState === 'running') {\n        primaryButton = `<button class=\"control-btn warning\" id=\"pause-btn\">Pause</button>`;\n      } else if (timerState === 'paused') {\n        primaryButton = `<button class=\"control-btn primary\" id=\"resume-btn\">Resume</button>`;\n      } else if (isCompleted) {\n        primaryButton = `<button class=\"control-btn primary\" id=\"next-btn\">Next Exercise</button>`;\n      }\n\n      return `\n        <div class=\"session-controls\">\n          ${primaryButton}\n          <button class=\"control-btn secondary\" id=\"reset-btn\" ${(!this.currentTimer || timerState === 'idle') ? 'disabled' : ''}>Reset</button>\n          <button class=\"control-btn secondary\" id=\"skip-btn\">Skip</button>\n        </div>\n      `;\n    }\n\n    // Handle set-based exercises (no block timer, but sets with rest)\n    if (!exercise) {\n      return `<div class=\"session-controls\"><button class=\"control-btn secondary\" id=\"skip-btn\">Skip</button></div>`;\n    }\n\n    const totalSets = exercise.sets || 1;\n    const isRestingBetweenSets = this.isRestingBetweenSets;\n    const timerState = this.currentTimer?.getState() || 'idle';\n\n    // If we're resting between sets (timer running)\n    if (isRestingBetweenSets && this.currentTimer) {\n      if (timerState === 'running') {\n        return `\n          <div class=\"session-controls\">\n            <button class=\"control-btn warning\" id=\"pause-btn\">Pause Rest</button>\n            <button class=\"control-btn secondary\" id=\"skip-rest-btn\">Skip Rest</button>\n          </div>\n        `;\n      } else if (timerState === 'paused') {\n        return `\n          <div class=\"session-controls\">\n            <button class=\"control-btn primary\" id=\"resume-btn\">Resume Rest</button>\n            <button class=\"control-btn secondary\" id=\"skip-rest-btn\">Skip Rest</button>\n          </div>\n        `;\n      } else if (timerState === 'completed') {\n        return `\n          <div class=\"session-controls\">\n            <button class=\"control-btn primary\" id=\"next-set-btn\">Start Next Set</button>\n          </div>\n        `;\n      }\n    }\n\n    // Default state: ready for next set\n    const setNumber = this.currentSetIndex + 1;\n\n    return `\n      <div class=\"session-controls\">\n        <button class=\"control-btn primary\" id=\"complete-set-btn\">\n          Complete Set ${setNumber}/${totalSets}\n        </button>\n        <button class=\"control-btn secondary\" id=\"skip-btn\">Skip Exercise</button>\n      </div>\n    `;\n  }\n\n  private renderNextUp(): string {\n    const nextExercise = this.getNextExercise();\n    if (!nextExercise) {\n      return `\n        <div class=\"next-up\">\n          <div class=\"next-up-label\">Next Up</div>\n          <div class=\"next-up-exercise\">Session Complete!</div>\n        </div>\n      `;\n    }\n\n    return `\n      <div class=\"next-up\">\n        <div class=\"next-up-label\">Next Up</div>\n        <div class=\"next-up-exercise\">${nextExercise.name}</div>\n      </div>\n    `;\n  }\n\n  private renderSessionComplete(): string {\n    const duration = this.sessionStartTime ? performance.now() - this.sessionStartTime : 0;\n    const formattedDuration = BaseTimer.formatTime(duration);\n\n    return `\n      <div class=\"session-complete\">\n        <div class=\"complete-icon\">🎉</div>\n        <div class=\"complete-title\">Workout Complete!</div>\n        <div class=\"complete-stats\">Duration: ${formattedDuration}</div>\n        <div class=\"session-controls\">\n          <button class=\"control-btn primary\" id=\"finish-btn\">Finish Session</button>\n        </div>\n      </div>\n    `;\n  }\n\n  private getCurrentBlock(): Block | null {\n    if (!this.currentDay || this.currentBlockIndex >= this.currentDay.blocks.length) {\n      return null;\n    }\n    return this.currentDay.blocks[this.currentBlockIndex];\n  }\n\n  private getCurrentExercise(): Exercise | null {\n    const block = this.getCurrentBlock();\n    if (!block || this.currentExerciseIndex >= block.exercises.length) {\n      return null;\n    }\n    return block.exercises[this.currentExerciseIndex];\n  }\n\n  private getNextExercise(): Exercise | null {\n    const block = this.getCurrentBlock();\n    if (!block) return null;\n\n    // Check if there's a next exercise in current block\n    if (this.currentExerciseIndex + 1 < block.exercises.length) {\n      return block.exercises[this.currentExerciseIndex + 1];\n    }\n\n    // Check if there's a next block\n    if (!this.currentDay || this.currentBlockIndex + 1 >= this.currentDay.blocks.length) {\n      return null;\n    }\n\n    const nextBlock = this.currentDay.blocks[this.currentBlockIndex + 1];\n    return nextBlock.exercises[0] || null;\n  }\n\n  private formatExerciseDetails(exercise: Exercise, block: Block): string {\n    const parts = [];\n    \n    if (exercise.sets) parts.push(`${exercise.sets} sets`);\n    if (exercise.reps) parts.push(`${exercise.reps} reps`);\n    if (exercise.restSec) parts.push(`${exercise.restSec}s rest`);\n    if (block.timerMode && block.timerMode !== 'none') parts.push(`${block.timerMode.toUpperCase()} format`);\n\n    return parts.join(' • ');\n  }\n\n  private getTimerProgress(): number {\n    if (!this.currentTimer) return 0;\n\n    const elapsed = this.currentTimer.getElapsedTime();\n    const total = this.currentTimer.getDuration();\n    return Math.min(elapsed / total, 1);\n  }\n\n  private getTimerPhase(): string {\n    if (!this.currentTimer) return 'Ready';\n\n    const block = this.getCurrentBlock();\n    if (!block?.timerMode || block.timerMode === 'none') return 'Timer Running';\n\n    if (this.currentTimer instanceof N90Timer || this.currentTimer instanceof TimedCircuitTimer) {\n      const phase = (this.currentTimer as any).getCurrentPhase?.();\n      if (phase === 'work') return 'Work Period';\n      if (phase === 'rest') return 'Rest Period';\n    }\n\n    return 'Timer Running';\n  }\n\n  private createTimerForCurrentBlock(): BaseTimer | null {\n    const block = this.getCurrentBlock();\n    if (!block?.timerMode || block.timerMode === 'none') return null;\n\n    const rounds = block.rounds || block.exercises.length;\n\n    switch (block.timerMode) {\n      case 'emom':\n        return EMOMTimer.createEMOM(rounds);\n      case 'e2mom':\n        return EMOMTimer.createE2MOM(rounds);\n      case 'e4mom':\n        return EMOMTimer.createE4MOM(rounds);\n      case 'n90':\n        return N90Timer.create(rounds);\n      case 'timed_circuit':\n        return TimedCircuitTimer.createTabata(rounds);\n      case 'fixed_rest':\n        const duration = block.durationSec || 180; // 3 minutes default rest\n        return FixedRestTimer.create(duration);\n      default:\n        return null;\n    }\n  }\n\n  private setupEventListeners() {\n    if (!this.shadowRoot) return;\n\n    this.shadowRoot.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n\n      if (target.id === 'start-btn') {\n        this.startTimer();\n      } else if (target.id === 'pause-btn') {\n        this.pauseTimer();\n      } else if (target.id === 'resume-btn') {\n        this.resumeTimer();\n      } else if (target.id === 'reset-btn') {\n        this.resetTimer();\n      } else if (target.id === 'skip-btn') {\n        this.skipExercise();\n      } else if (target.id === 'complete-exercise-btn') {\n        this.completeExercise();\n      } else if (target.id === 'complete-set-btn') {\n        this.completeSet();\n      } else if (target.id === 'skip-rest-btn') {\n        this.skipRest();\n      } else if (target.id === 'next-set-btn') {\n        this.startNextSet();\n      } else if (target.id === 'next-btn') {\n        this.nextExercise();\n      } else if (target.id === 'finish-btn') {\n        this.finishSession();\n      } else if (target.id === 'cancel-session') {\n        this.cancelSession();\n      }\n    });\n  }\n\n  private async startTimer() {\n    if (!this.sessionStartTime) {\n      this.sessionStartTime = performance.now();\n      // Request notification permission when starting first timer\n      await backgroundTimerManager.requestNotificationPermission();\n    }\n\n    // Acquire wake lock to keep screen active\n    await wakeLockManager.acquire();\n\n    this.currentTimer = this.createTimerForCurrentBlock();\n    if (!this.currentTimer) return;\n\n    this.currentTimer.addCallback((event: TimerEvent) => {\n      this.handleTimerEvent(event);\n    });\n\n    this.currentTimer.start();\n    feedbackManager.timerStart();\n    this.render();\n  }\n\n  private pauseTimer() {\n    this.currentTimer?.pause();\n    feedbackManager.timerPause();\n    this.render();\n  }\n\n  private resumeTimer() {\n    this.currentTimer?.start();\n    feedbackManager.timerStart();\n    this.render();\n  }\n\n  private resetTimer() {\n    this.currentTimer?.reset();\n    this.render();\n  }\n\n  private skipExercise() {\n    this.nextExercise();\n  }\n\n  private completeExercise() {\n    // For now, same behavior as skip - just advance to next exercise\n    // TODO: Future enhancement could handle rest periods between exercises\n    this.nextExercise();\n  }\n\n  private async completeSet() {\n    const exercise = this.getCurrentExercise();\n    if (!exercise) return;\n\n    const totalSets = exercise.sets || 1;\n    const isLastSet = this.currentSetIndex >= totalSets - 1;\n\n    feedbackManager.setComplete();\n\n    if (isLastSet) {\n      // Exercise is complete, move to next exercise\n      this.nextExercise();\n    } else {\n      // Start rest timer if exercise has rest time\n      if (exercise.restSec && exercise.restSec > 0) {\n        this.currentSetIndex++;\n        this.isRestingBetweenSets = true;\n        \n        // Create rest timer\n        this.currentTimer = FixedRestTimer.create(exercise.restSec);\n        this.currentTimer.addCallback((event) => {\n          if (event.type === 'complete') {\n            this.handleRestComplete();\n          } else if (event.type === 'tick') {\n            // Update display on each tick\n            this.updateTimerDisplay();\n          }\n        });\n        \n        // Start rest timer\n        this.currentTimer.start();\n        feedbackManager.restStart();\n      } else {\n        // No rest time, just move to next set\n        this.currentSetIndex++;\n      }\n      \n      this.render();\n    }\n  }\n\n  private skipRest() {\n    if (this.currentTimer) {\n      this.currentTimer.stop();\n      this.currentTimer = null;\n    }\n    this.handleRestComplete();\n  }\n\n  private startNextSet() {\n    this.handleRestComplete();\n  }\n\n  private handleRestComplete() {\n    this.isRestingBetweenSets = false;\n    this.currentTimer?.stop();\n    this.currentTimer = null;\n    feedbackManager.restComplete();\n    this.render();\n  }\n\n  private nextExercise() {\n    const block = this.getCurrentBlock();\n    if (!block) return;\n\n    feedbackManager.exerciseComplete();\n\n    this.currentTimer?.stop();\n    this.currentTimer = null;\n\n    // Reset set tracking for new exercise\n    this.currentSetIndex = 0;\n    this.isRestingBetweenSets = false;\n\n    // Move to next exercise in current block\n    if (this.currentExerciseIndex + 1 < block.exercises.length) {\n      this.currentExerciseIndex++;\n    } else {\n      // Move to next block\n      this.currentBlockIndex++;\n      this.currentExerciseIndex = 0;\n    }\n\n    this.render();\n  }\n\n  private async finishSession() {\n    feedbackManager.sessionComplete();\n    await this.cleanup();\n    \n    // Show save/discard dialog\n    this.showSessionSaveDialog();\n  }\n\n  private showSessionSaveDialog() {\n    const duration = this.sessionStartTime ? Math.round((performance.now() - this.sessionStartTime) / 1000) : 0;\n    const minutes = Math.floor(duration / 60);\n    const seconds = duration % 60;\n    const durationText = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n\n    if (!this.shadowRoot) return;\n    \n    // Create overlay dialog\n    const dialogHtml = `\n      <div class=\"session-save-overlay\">\n        <div class=\"session-save-dialog\">\n          <h3>Session Complete!</h3>\n          <p>Duration: ${durationText}</p>\n          <p>Do you want to save this workout session?</p>\n          \n          <div class=\"dialog-actions\">\n            <button class=\"discard-btn\" id=\"discard-session\">\n              Discard Session\n            </button>\n            <button class=\"save-btn\" id=\"save-session\">\n              Save Session\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Add dialog to shadow DOM\n    const dialogElement = document.createElement('div');\n    dialogElement.innerHTML = dialogHtml;\n    this.shadowRoot.appendChild(dialogElement);\n\n    // Add event listeners\n    const discardBtn = this.shadowRoot.querySelector('#discard-session');\n    const saveBtn = this.shadowRoot.querySelector('#save-session');\n\n    discardBtn?.addEventListener('click', () => {\n      this.discardSession();\n    });\n\n    saveBtn?.addEventListener('click', () => {\n      this.saveSession();\n    });\n  }\n\n  private discardSession() {\n    console.log('Session discarded (not saved)');\n    \n    this.dispatchEvent(new CustomEvent('session-complete', {\n      detail: {\n        day: this.currentDay,\n        duration: this.sessionStartTime ? performance.now() - this.sessionStartTime : 0,\n        saved: false\n      }\n    }));\n  }\n\n  private saveSession() {\n    console.log('Session saved');\n    \n    // TODO: Actually save session data to IndexedDB\n    this.dispatchEvent(new CustomEvent('session-complete', {\n      detail: {\n        day: this.currentDay,\n        duration: this.sessionStartTime ? performance.now() - this.sessionStartTime : 0,\n        saved: true\n      }\n    }));\n  }\n\n  private async cancelSession() {\n    const confirmed = confirm('Are you sure you want to cancel this session? Your progress will not be saved.');\n    \n    if (confirmed) {\n      console.log('Session cancelled by user');\n      await this.cleanup();\n      \n      this.dispatchEvent(new CustomEvent('session-complete', {\n        detail: {\n          day: this.currentDay,\n          duration: this.sessionStartTime ? performance.now() - this.sessionStartTime : 0,\n          saved: false,\n          cancelled: true\n        }\n      }));\n    }\n  }\n\n  private setupBackgroundHandling() {\n    // Set up callback for when app returns to foreground\n    this.foregroundCallback = () => {\n      // Re-acquire wake lock if we had one and it was lost\n      if (this.currentTimer?.getState() === 'running') {\n        wakeLockManager.reacquire();\n      }\n      \n      // Update display in case timer kept running in background\n      this.updateTimerDisplay();\n    };\n\n    backgroundTimerManager.addForegroundCallback(this.foregroundCallback);\n  }\n\n  private async cleanup() {\n    // Stop timer\n    if (this.currentTimer) {\n      this.currentTimer.stop();\n      this.currentTimer = null;\n    }\n\n    // Release wake lock\n    await wakeLockManager.release();\n\n    // Remove background callback\n    if (this.foregroundCallback) {\n      backgroundTimerManager.removeForegroundCallback(this.foregroundCallback);\n      this.foregroundCallback = null;\n    }\n  }\n\n  private handleTimerEvent(event: TimerEvent) {\n    if (event.type === 'tick') {\n      this.updateTimerDisplay();\n      this.checkForPhaseChange();\n      this.checkForCountdownWarning(event.remaining);\n    } else if (event.type === 'complete') {\n      feedbackManager.exerciseComplete();\n      this.render(); // Re-render to show \"Next Exercise\" button\n    } else if (event.type === 'roundComplete') {\n      feedbackManager.roundComplete();\n    }\n  }\n\n  private checkForPhaseChange() {\n    const currentPhase = this.getTimerPhase();\n    \n    if (this.lastPhase && this.lastPhase !== currentPhase) {\n      if (currentPhase === 'Work Period') {\n        feedbackManager.workPeriodStart();\n      } else if (currentPhase === 'Rest Period') {\n        feedbackManager.restPeriodStart();\n      }\n    }\n    \n    this.lastPhase = currentPhase;\n  }\n\n  private checkForCountdownWarning(remaining: number) {\n    // Warn at 3, 2, 1 seconds remaining\n    const secondsRemaining = Math.ceil(remaining / 1000);\n    \n    if (secondsRemaining <= 3 && secondsRemaining > 0) {\n      const lastWarnTime = (this as any).lastWarnTime || 0;\n      const currentTime = performance.now();\n      \n      // Only warn once per second\n      if (currentTime - lastWarnTime > 900) {\n        feedbackManager.countdownWarning();\n        (this as any).lastWarnTime = currentTime;\n      }\n    }\n  }\n\n  private updateTimerDisplay() {\n    if (!this.shadowRoot || !this.currentTimer) return;\n\n    const timerDisplay = this.shadowRoot.querySelector('.timer-display');\n    const progressFill = this.shadowRoot.querySelector('.progress-fill') as HTMLElement;\n    const timerProgress = this.shadowRoot.querySelector('.timer-progress');\n    const timerPhase = this.shadowRoot.querySelector('.timer-phase');\n\n    if (timerDisplay) {\n      const remaining = this.currentTimer.getRemainingInCurrentPeriod();\n      timerDisplay.textContent = BaseTimer.formatTime(remaining);\n    }\n\n    if (progressFill) {\n      const progress = this.getTimerProgress();\n      progressFill.style.width = `${progress * 100}%`;\n    }\n\n    if (timerProgress) {\n      const currentRound = this.currentTimer.getCurrentRound();\n      const totalRounds = this.currentTimer.getTotalRounds();\n      timerProgress.textContent = `Round ${currentRound} of ${totalRounds}`;\n    }\n\n    if (timerPhase) {\n      timerPhase.textContent = this.getTimerPhase();\n    }\n  }\n}\n\ncustomElements.define('view-session', ViewSession);","/**\n * App update manager for PWA\n * Handles service worker updates and notifies user when new version is available\n */\nexport class AppUpdater {\n  private registration: ServiceWorkerRegistration | null = null;\n  private showUpdateCallback: (() => void) | null = null;\n\n  constructor() {\n    // Wait for DOM to be ready before setting up service worker\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => this.setupUpdateDetection());\n    } else {\n      this.setupUpdateDetection();\n    }\n  }\n\n  private async setupUpdateDetection() {\n    if (!('serviceWorker' in navigator)) {\n      console.log('Service workers not supported');\n      return;\n    }\n\n    try {\n      // Register service worker\n      this.registration = await navigator.serviceWorker.register('/sw.js');\n      console.log('ServiceWorker registered:', this.registration);\n\n      // Check for updates immediately on startup\n      console.log('Checking for updates on startup...');\n      await this.checkForUpdates();\n      \n      // Check if there's already a waiting worker (happens on app restart)\n      console.log('Checking for waiting service worker...');\n      this.checkForWaitingWorker();\n      \n      // Double-check after a short delay to catch any race conditions\n      setTimeout(() => {\n        console.log('Double-checking for waiting service worker after delay...');\n        this.checkForWaitingWorker();\n      }, 1000);\n\n      // Also listen for when a waiting worker becomes available later\n      if (this.registration.installing) {\n        this.trackInstallingWorker(this.registration.installing);\n      }\n\n      // Check for updates every 30 seconds when app is active\n      setInterval(() => {\n        if (document.visibilityState === 'visible') {\n          console.log('Periodic update check (30s interval)');\n          this.checkForUpdates();\n        }\n      }, 30000);\n\n      // Check for updates when app comes to foreground\n      document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible') {\n          console.log('App came to foreground, checking for updates');\n          this.checkForUpdates();\n        }\n      });\n\n      // Listen for service worker updates\n      this.registration.addEventListener('updatefound', () => {\n        console.log('Update found, installing new version...');\n        const newWorker = this.registration?.installing;\n        \n        if (newWorker) {\n          this.trackInstallingWorker(newWorker);\n        }\n      });\n\n      // Listen for service worker controlling the page\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        console.log('New service worker took control, reloading page');\n        window.location.reload();\n      });\n\n    } catch (error) {\n      console.error('ServiceWorker registration failed:', error);\n    }\n  }\n\n  private async checkForUpdates() {\n    if (!this.registration) {\n      console.log('No registration available for update check');\n      return;\n    }\n\n    try {\n      console.log('Calling registration.update()...');\n      await this.registration.update();\n      console.log('Update check completed');\n      \n      // After update check, also check if there's a waiting worker\n      if (this.registration.waiting) {\n        console.log('Found waiting worker after update check');\n        this.showUpdateAvailable();\n      }\n    } catch (error) {\n      console.error('Failed to check for updates:', error);\n    }\n  }\n\n  private checkForWaitingWorker() {\n    if (!this.registration) return;\n\n    if (this.registration.waiting) {\n      console.log('Found waiting service worker on startup');\n      this.showUpdateAvailable();\n    }\n  }\n\n  private trackInstallingWorker(worker: ServiceWorker) {\n    worker.addEventListener('statechange', () => {\n      console.log('Service worker state changed:', worker.state);\n      if (worker.state === 'installed' && navigator.serviceWorker.controller) {\n        // New version is ready\n        console.log('New version ready');\n        this.showUpdateAvailable();\n      }\n    });\n  }\n\n  private showUpdateAvailable() {\n    if (this.showUpdateCallback) {\n      this.showUpdateCallback();\n    } else {\n      // Default behavior if no callback is set\n      this.showDefaultUpdateNotification();\n    }\n  }\n\n  private showDefaultUpdateNotification() {\n    if (confirm('A new version of Minimalift is available! Click OK to update now.')) {\n      this.applyUpdate();\n    }\n  }\n\n  /**\n   * Set callback function to show custom update notification\n   */\n  onUpdateAvailable(callback: () => void) {\n    this.showUpdateCallback = callback;\n  }\n\n  /**\n   * Apply the pending update\n   */\n  async applyUpdate() {\n    if (!this.registration?.waiting) {\n      console.log('No update waiting');\n      return;\n    }\n\n    // Tell the waiting service worker to skip waiting and become active\n    this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n  }\n\n  /**\n   * Force check for updates (public method for manual triggering)\n   */\n  async forceUpdateCheck() {\n    console.log('Manual update check triggered...');\n    await this.checkForUpdates();\n    \n    // Give some time for the update process to complete\n    setTimeout(() => {\n      this.checkForWaitingWorker();\n    }, 2000);\n  }\n}\n\nexport const appUpdater = new AppUpdater();","import { appUpdater } from '../utils/app-updater';\n\nexport class UpdateNotification extends HTMLElement {\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this.setupUpdateListener();\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n  }\n\n  private setupUpdateListener() {\n    appUpdater.onUpdateAvailable(() => {\n      this.show();\n    });\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          position: fixed;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          z-index: 1000;\n          transform: translateY(100%);\n          transition: transform 0.3s ease-in-out;\n          padding: env(safe-area-inset-bottom) 16px 16px 16px;\n        }\n\n        :host(.visible) {\n          transform: translateY(0);\n        }\n\n        .notification {\n          background: var(--accent, #007AFF);\n          color: white;\n          padding: 16px;\n          border-radius: 12px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          gap: 12px;\n        }\n\n        .content {\n          flex: 1;\n        }\n\n        .title {\n          font-weight: 600;\n          font-size: 16px;\n          margin: 0 0 4px 0;\n        }\n\n        .message {\n          font-size: 14px;\n          opacity: 0.9;\n          margin: 0;\n        }\n\n        .actions {\n          display: flex;\n          gap: 8px;\n        }\n\n        button {\n          padding: 8px 16px;\n          border: none;\n          border-radius: 6px;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .update-btn {\n          background: rgba(255, 255, 255, 0.2);\n          color: white;\n          border: 1px solid rgba(255, 255, 255, 0.3);\n        }\n\n        .update-btn:hover {\n          background: rgba(255, 255, 255, 0.3);\n        }\n\n        .dismiss-btn {\n          background: transparent;\n          color: rgba(255, 255, 255, 0.8);\n          border: 1px solid rgba(255, 255, 255, 0.2);\n        }\n\n        .dismiss-btn:hover {\n          background: rgba(255, 255, 255, 0.1);\n          color: white;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host {\n            --accent: #007AFF;\n          }\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --accent: #007AFF;\n          }\n        }\n      </style>\n\n      <div class=\"notification\">\n        <div class=\"content\">\n          <div class=\"title\">🚀 Update Available</div>\n          <div class=\"message\">A new version of Minimalift is ready to install.</div>\n        </div>\n        <div class=\"actions\">\n          <button class=\"dismiss-btn\" id=\"dismiss\">Later</button>\n          <button class=\"update-btn\" id=\"update\">Update Now</button>\n        </div>\n      </div>\n    `;\n  }\n\n  private setupEventListeners() {\n    if (!this.shadowRoot) return;\n\n    const updateBtn = this.shadowRoot.querySelector('#update');\n    const dismissBtn = this.shadowRoot.querySelector('#dismiss');\n\n    updateBtn?.addEventListener('click', () => {\n      this.applyUpdate();\n    });\n\n    dismissBtn?.addEventListener('click', () => {\n      this.hide();\n    });\n  }\n\n  private show() {\n    this.classList.add('visible');\n  }\n\n  private hide() {\n    this.classList.remove('visible');\n  }\n\n  private async applyUpdate() {\n    // Show loading state\n    const updateBtn = this.shadowRoot?.querySelector('#update');\n    if (updateBtn) {\n      updateBtn.textContent = 'Updating...';\n      (updateBtn as HTMLButtonElement).disabled = true;\n    }\n\n    // Apply the update\n    await appUpdater.applyUpdate();\n  }\n\n}\n\ncustomElements.define('update-notification', UpdateNotification);","type RouteHandler = () => void;\n\ninterface Route {\n  path: string;\n  handler: RouteHandler;\n}\n\nexport class Router {\n  private routes: Route[] = [];\n  private currentPath: string = '';\n\n  constructor() {\n    window.addEventListener('hashchange', () => this.handleRouteChange());\n    window.addEventListener('DOMContentLoaded', () => this.handleRouteChange());\n  }\n\n  register(path: string, handler: RouteHandler): void {\n    this.routes.push({ path, handler });\n  }\n\n  navigate(path: string): void {\n    window.location.hash = path;\n  }\n\n  private handleRouteChange(): void {\n    const hash = window.location.hash.slice(1) || '/';\n    this.currentPath = hash;\n\n    // Find matching route\n    const route = this.routes.find(r => {\n      if (r.path.includes(':')) {\n        // Handle dynamic routes like /day/:id\n        const regex = new RegExp('^' + r.path.replace(/:[^/]+/g, '([^/]+)') + '$');\n        return regex.test(hash);\n      }\n      return r.path === hash;\n    });\n\n    if (route) {\n      route.handler();\n    } else {\n      // Default to home\n      const homeRoute = this.routes.find(r => r.path === '/');\n      if (homeRoute) {\n        homeRoute.handler();\n      }\n    }\n  }\n\n  getParams(): Record<string, string> {\n    const hash = window.location.hash.slice(1) || '/';\n    const params: Record<string, string> = {};\n\n    // Find matching route with params\n    this.routes.find(r => {\n      if (r.path.includes(':')) {\n        const pathParts = r.path.split('/');\n        const hashParts = hash.split('/');\n        \n        if (pathParts.length === hashParts.length) {\n          let matches = true;\n          for (let i = 0; i < pathParts.length; i++) {\n            if (pathParts[i].startsWith(':')) {\n              params[pathParts[i].slice(1)] = hashParts[i];\n            } else if (pathParts[i] !== hashParts[i]) {\n              matches = false;\n              break;\n            }\n          }\n          return matches;\n        }\n      }\n      return false;\n    });\n\n    return params;\n  }\n\n  getCurrentPath(): string {\n    return this.currentPath;\n  }\n\n  start(): void {\n    this.handleRouteChange();\n  }\n}\n\nexport const router = new Router();","import './ui/app-shell';\nimport './ui/view-home';\nimport './ui/view-day';\nimport './ui/view-session';\nimport './ui/update-notification';\nimport { router } from './router';\nimport { programManager } from './program';\n\n// Service worker registration is now handled by AppUpdater\n\n// Initialize app with error handling\ndocument.addEventListener('DOMContentLoaded', async () => {\n  console.log('DOM loaded, initializing app...');\n  try {\n  // Initialize data\n  console.log('Initializing program manager...');\n  await programManager.initialize();\n  console.log('Program manager initialized');\n\n  // Wait for app-shell to be fully initialized\n  const appShell = document.querySelector('app-shell');\n  if (!appShell) {\n    console.error('App shell not found');\n    return;\n  }\n\n  console.log('Found app shell, waiting for shadow DOM...');\n\n  // Wait for the shadow DOM to be ready\n  await new Promise(resolve => {\n    const check = () => {\n      const shadowRoot = (appShell as any).shadowRoot;\n      if (shadowRoot && shadowRoot.querySelector('#content')) {\n        console.log('Shadow DOM ready');\n        resolve(void 0);\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n  \n  const content = (appShell as any).shadowRoot.querySelector('#content') as HTMLElement;\n  \n  if (!content) {\n    console.error('Content container not found');\n    return;\n  }\n\n  // Set up routing\n  router.register('/', () => showHome());\n  router.register('/day/:id', () => showDay());\n  router.register('/session/:id', () => showSession());\n\n  function showHome() {\n    content.innerHTML = '<view-home></view-home>';\n    const viewHome = content.querySelector('view-home');\n    \n    viewHome?.addEventListener('navigate-to-day', ((e: CustomEvent) => {\n      router.navigate(`/day/${e.detail.dayId}`);\n    }) as EventListener);\n  }\n\n  function showDay() {\n    const params = router.getParams();\n    const dayId = params.id;\n    \n    if (dayId) {\n      content.innerHTML = '<view-day></view-day>';\n      const viewDay = content.querySelector('view-day') as any;\n      \n      if (viewDay && viewDay.loadDay) {\n        viewDay.loadDay(dayId);\n      }\n\n      viewDay?.addEventListener('start-session', ((e: CustomEvent) => {\n        router.navigate(`/session/${e.detail.dayId}`);\n      }) as EventListener);\n    }\n  }\n\n  async function showSession() {\n    const params = router.getParams();\n    const dayId = params.id;\n    \n    if (dayId) {\n      const day = await programManager.getDay(dayId);\n      if (day) {\n        content.innerHTML = '<view-session></view-session>';\n        const viewSession = content.querySelector('view-session') as any;\n        \n        if (viewSession && viewSession.setDay) {\n          viewSession.setDay(day);\n        }\n\n        viewSession?.addEventListener('session-complete', ((e: CustomEvent) => {\n          console.log('Session completed:', e.detail);\n          router.navigate(`/day/${dayId}`);\n        }) as EventListener);\n      }\n    }\n  }\n\n  if (appShell) {\n    // Listen for day selection from header\n    appShell.addEventListener('day-selected', ((e: CustomEvent) => {\n      const dayNumber = e.detail.day;\n      const dayId = `p1_w1_d${dayNumber}`;\n      router.navigate(`/day/${dayId}`);\n    }) as EventListener);\n    \n    // Listen for settings\n    appShell.addEventListener('open-settings', () => {\n      console.log('Open settings');\n      // TODO: Show settings modal\n    });\n  }\n\n  // Start the router\n  console.log('Starting router...');\n  router.start();\n  \n  // Default to Day 1 if no hash is set\n  if (!window.location.hash || window.location.hash === '#/') {\n    console.log('No hash found, navigating to Day 1');\n    router.navigate('/day/p1_w1_d1');\n  } else {\n    console.log('Found hash:', window.location.hash);\n  }\n  \n  console.log('App initialization complete');\n  } catch (error) {\n    console.error('Failed to initialize app:', error);\n    // Show error message to user\n    document.body.innerHTML = `\n      <div style=\"padding: 20px; text-align: center; font-family: -apple-system, BlinkMacSystemFont, sans-serif;\">\n        <h1>Oops! Something went wrong</h1>\n        <p>There was an error loading Minimalift. Please refresh the page to try again.</p>\n        <button onclick=\"window.location.reload()\" style=\"padding: 10px 20px; font-size: 16px; background: #007AFF; color: white; border: none; border-radius: 6px; cursor: pointer;\">\n          Reload App\n        </button>\n      </div>\n    `;\n  }\n});"],"file":"assets/index-CD746y9H.js"}