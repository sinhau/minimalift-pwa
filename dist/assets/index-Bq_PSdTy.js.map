{"version":3,"mappings":"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","names":["AppShell","btn","e","day","display","round","timerBar","timerDisplay","timerRound","IDB","__publicField","resolve","reject","request","event","db","sessionsStore","storeName","mode","key","store","data","indexName","query","index","idb","_ProgramManager","seedData","__vitePreload","program","programId","dayId","a","b","ProgramManager","programManager","ViewHome","card","blockTypes","exerciseCount","sum","block","type","ViewDay","chip","el","exerciseId","substitute","timerLabel","exercise","setsReps","sub","timerType","BaseComponent","html","eventName","detail","selector","SessionState","exercisesPerInterval","startIdx","nextGroupStart","totalExercises","completedExercises","percentage","resting","SessionRenderer","progress","exercises","setNumber","ex","setInfo","config","info","minutes","timeStr","exerciseStr","isRunning","isPaused","isResting","hasTimer","isIntervalBlock","hasMultipleExercises","buttons","label","remainingSeconds","parts","sections","BaseTimer","tickInterval","callback","elapsed","remainingInPeriod","currentRound","totalRounds","duration","previousRound","error","milliseconds","totalSeconds","seconds","totalMs","ms","IntervalTimer","intervalSec","remaining","WorkRestTimer","workSec","restSec","totalSets","periodDuration","timeInSet","currentSet","wasWorkPhase","CircuitTimer","stations","transitionSec","stationTime","s","transitionTime","roundDuration","timeInRound","accumulated","i","stationDuration","transitionDuration","station","prevRound","TabataTimer","highIntensitySec","lowIntensitySec","StopwatchTimer","lastLapTime","lapTime","previousLapTime","_elapsed","TimerFactory","restSeconds","sets","WakeLockManager","err","wakeLockManager","BackgroundTimerManager","timeInBackground","notification","backgroundTimerManager","FeedbackManager","enabled","pattern","frequency","volume","oscillator","gainNode","freq","feedbackManager","ViewSession","container","nextExercise","lastEvent","isInterval","hasMultiple","timerState","indices","currentRoundIndex","remainingRounds","secondsRemaining","lastWarnTime","currentTime","dialogHtml","overlay","AppUpdater","newWorker","worker","appUpdater","UpdateIndicator","indicator","TimerDisplay","progressBar","infoEl","total","Router","path","handler","hash","route","r","homeRoute","params","pathParts","hashParts","matches","router","showHome","content","showDay","viewDay","appShell","check","shadowRoot","showSession","viewSession"],"ignoreList":[],"sources":["../../src/ui/app-shell.ts","../../src/idb.ts","../../src/program.ts","../../src/ui/view-home.ts","../../src/ui/view-day.ts","../../src/ui/base-component.ts","../../src/ui/session-state.ts","../../src/ui/session-renderer.ts","../../src/timers/timer-engine.ts","../../src/timers/interval.ts","../../src/timers/work-rest.ts","../../src/timers/circuit.ts","../../src/timers/tabata.ts","../../src/timers/stopwatch.ts","../../src/timers/timer-factory.ts","../../src/utils/wake-lock.ts","../../src/utils/background-timer.ts","../../src/utils/feedback.ts","../../src/ui/view-session.ts","../../src/utils/app-updater.ts","../../src/ui/update-indicator.ts","../../src/ui/timer-display.ts","../../src/router.ts","../../src/main.ts"],"sourcesContent":["export class AppShell extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n    \n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          height: 100vh;\n          height: 100dvh;\n          background: var(--bg-primary);\n          color: var(--text-primary);\n          position: relative;\n        }\n\n        header {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          background: var(--bg-secondary);\n          padding: env(safe-area-inset-top) 16px 0 16px;\n          border-bottom: 1px solid var(--border);\n          z-index: 10;\n        }\n\n        .header-content {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 12px 0;\n        }\n\n        .logo {\n          display: flex;\n          align-items: center;\n        }\n\n        .day-selector {\n          display: flex;\n          gap: 8px;\n        }\n\n        .day-btn {\n          padding: 6px 12px;\n          background: var(--bg-primary);\n          border: 1px solid var(--border);\n          border-radius: 6px;\n          color: var(--text-primary);\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n\n        .day-btn.active {\n          background: var(--accent);\n          color: white;\n          border-color: var(--accent);\n        }\n\n        .header-actions {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n\n        main {\n          position: absolute;\n          top: calc(env(safe-area-inset-top) + 65px); /* Safe area + header content */\n          left: 0;\n          right: 0;\n          bottom: 0;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n          padding: 0;\n          background: var(--bg-primary);\n        }\n\n        .timer-bar {\n          position: fixed;\n          bottom: 0;\n          left: 0;\n          right: 0;\n          background: var(--bg-secondary);\n          border-top: 1px solid var(--border);\n          padding: 12px 16px;\n          padding-bottom: calc(12px + env(safe-area-inset-bottom));\n          display: none;\n          backdrop-filter: blur(10px);\n          -webkit-backdrop-filter: blur(10px);\n        }\n\n        .timer-bar.active {\n          display: block;\n        }\n\n        .timer-content {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n\n        .timer-display {\n          font-size: 24px;\n          font-weight: 600;\n          font-variant-numeric: tabular-nums;\n        }\n\n        .timer-controls {\n          display: flex;\n          gap: 8px;\n        }\n\n        .timer-btn {\n          padding: 8px 16px;\n          background: var(--accent);\n          color: white;\n          border: none;\n          border-radius: 6px;\n          font-size: 14px;\n          font-weight: 500;\n          cursor: pointer;\n        }\n\n        .timer-btn.pause {\n          background: var(--warning);\n        }\n\n        .timer-round {\n          font-size: 14px;\n          color: var(--text-secondary);\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host {\n            --bg-primary: #000000;\n            --bg-secondary: #1a1a1a;\n            --text-primary: #ffffff;\n            --text-secondary: #999999;\n            --border: #333333;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n      </style>\n\n      <header>\n        <div class=\"header-content\">\n          <div class=\"logo\">\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n              <rect width=\"32\" height=\"32\" rx=\"6\" fill=\"#000000\"/>\n              <text x=\"16\" y=\"16\" font-family=\"-apple-system, system-ui, sans-serif\" font-size=\"18\" font-weight=\"bold\" fill=\"#FFFFFF\" text-anchor=\"middle\" dominant-baseline=\"middle\">M</text>\n            </svg>\n          </div>\n          <div class=\"day-selector\">\n            <button class=\"day-btn active\" data-day=\"1\">Day 1</button>\n            <button class=\"day-btn\" data-day=\"2\">Day 2</button>\n            <button class=\"day-btn\" data-day=\"3\">Day 3</button>\n          </div>\n          <div class=\"header-actions\">\n            <update-indicator></update-indicator>\n          </div>\n        </div>\n      </header>\n\n      <main id=\"content\">\n      </main>\n\n      <div class=\"timer-bar\" id=\"timer-bar\">\n        <div class=\"timer-content\">\n          <div>\n            <div class=\"timer-display\" id=\"timer-display\">00:00</div>\n            <div class=\"timer-round\" id=\"timer-round\">Round 1/6</div>\n          </div>\n          <div class=\"timer-controls\">\n            <button class=\"timer-btn\" id=\"timer-toggle\">Start</button>\n            <button class=\"timer-btn pause\" id=\"timer-reset\">Reset</button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private setupEventListeners() {\n    if (!this.shadowRoot) return;\n\n    // Day selector\n    this.shadowRoot.querySelectorAll('.day-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const target = e.target as HTMLButtonElement;\n        const day = target.dataset.day;\n        if (day) {\n          this.selectDay(day);\n        }\n      });\n    });\n\n  }\n\n  private selectDay(day: string) {\n    if (!this.shadowRoot) return;\n    \n    this.shadowRoot.querySelectorAll('.day-btn').forEach(btn => {\n      btn.classList.remove('active');\n    });\n    \n    const selectedBtn = this.shadowRoot.querySelector(`.day-btn[data-day=\"${day}\"]`);\n    selectedBtn?.classList.add('active');\n    \n    this.dispatchEvent(new CustomEvent('day-selected', { detail: { day } }));\n  }\n\n  showTimer(display: string, round: string) {\n    if (!this.shadowRoot) return;\n    \n    const timerBar = this.shadowRoot.querySelector('#timer-bar');\n    const timerDisplay = this.shadowRoot.querySelector('#timer-display');\n    const timerRound = this.shadowRoot.querySelector('#timer-round');\n    \n    if (timerBar) timerBar.classList.add('active');\n    if (timerDisplay) timerDisplay.textContent = display;\n    if (timerRound) timerRound.textContent = round;\n  }\n\n  hideTimer() {\n    if (!this.shadowRoot) return;\n    \n    const timerBar = this.shadowRoot.querySelector('#timer-bar');\n    if (timerBar) timerBar.classList.remove('active');\n  }\n}\n\ncustomElements.define('app-shell', AppShell);","type StoreNames = 'programs' | 'days' | 'sessions';\n\nclass IDB {\n  private db: IDBDatabase | null = null;\n  private readonly dbName = 'minimalift_v1';\n  private readonly version = 1;\n\n  async openDb(): Promise<IDBDatabase> {\n    if (this.db) return this.db;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(this.db);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create programs store\n        if (!db.objectStoreNames.contains('programs')) {\n          db.createObjectStore('programs', { keyPath: 'programId' });\n        }\n\n        // Create days store with index\n        if (!db.objectStoreNames.contains('days')) {\n          const daysStore = db.createObjectStore('days', { keyPath: 'dayId' });\n          daysStore.createIndex('programId', 'programId', { unique: false });\n        }\n\n        // Create sessions store with indexes\n        if (!db.objectStoreNames.contains('sessions')) {\n          const sessionsStore = db.createObjectStore('sessions', { \n            keyPath: 'sessionId', \n            autoIncrement: true \n          });\n          sessionsStore.createIndex('dayId', 'dayId', { unique: false });\n          sessionsStore.createIndex('date', 'startedAt', { unique: false });\n        }\n      };\n    });\n  }\n\n  async tx(storeName: StoreNames, mode: IDBTransactionMode = 'readonly'): Promise<IDBObjectStore> {\n    const db = await this.openDb();\n    const transaction = db.transaction([storeName], mode);\n    return transaction.objectStore(storeName);\n  }\n\n  async get<T>(storeName: StoreNames, key: IDBValidKey): Promise<T | undefined> {\n    const store = await this.tx(storeName);\n    return new Promise((resolve, reject) => {\n      const request = store.get(key);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getAll<T>(storeName: StoreNames): Promise<T[]> {\n    const store = await this.tx(storeName);\n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async put<T>(storeName: StoreNames, data: T): Promise<IDBValidKey> {\n    const store = await this.tx(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.put(data);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async delete(storeName: StoreNames, key: IDBValidKey): Promise<void> {\n    const store = await this.tx(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.delete(key);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async indexGetAll<T>(\n    storeName: StoreNames, \n    indexName: string, \n    query?: IDBValidKey | IDBKeyRange\n  ): Promise<T[]> {\n    const store = await this.tx(storeName);\n    const index = store.index(indexName);\n    return new Promise((resolve, reject) => {\n      const request = query ? index.getAll(query) : index.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async clear(storeName: StoreNames): Promise<void> {\n    const store = await this.tx(storeName, 'readwrite');\n    return new Promise((resolve, reject) => {\n      const request = store.clear();\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n\nexport const idb = new IDB();","import { idb } from './idb';\nimport { Program, Day, SeedData } from './types';\n\nexport class ProgramManager {\n  private static instance: ProgramManager;\n  \n  private constructor() {}\n  \n  static getInstance(): ProgramManager {\n    if (!ProgramManager.instance) {\n      ProgramManager.instance = new ProgramManager();\n    }\n    return ProgramManager.instance;\n  }\n\n  async initialize(): Promise<void> {\n    // Load seed data from TypeScript module\n    const { seedData } = await import('./data/seed-data');\n    \n    // Check if data already exists\n    const existingProgram = await idb.get<Program>('programs', seedData.programId);\n    \n    if (!existingProgram) {\n      await this.loadSeedData(seedData);\n    }\n  }\n\n  private async loadSeedData(seedData: SeedData): Promise<void> {\n    // Load program\n    const program: Program = {\n      programId: seedData.programId,\n      title: seedData.title\n    };\n    await idb.put('programs', program);\n\n    // Load days\n    for (const day of seedData.days) {\n      await idb.put('days', day);\n    }\n    \n    console.log('Seed data loaded successfully');\n  }\n\n  async getProgram(programId: string): Promise<Program | undefined> {\n    return await idb.get<Program>('programs', programId);\n  }\n\n  async getDaysForProgram(programId: string): Promise<Day[]> {\n    return await idb.indexGetAll<Day>('days', 'programId', programId);\n  }\n\n  async getDay(dayId: string): Promise<Day | undefined> {\n    return await idb.get<Day>('days', dayId);\n  }\n\n  async getAllDays(): Promise<Day[]> {\n    const days = await idb.getAll<Day>('days');\n    return days.sort((a, b) => a.order - b.order);\n  }\n}\n\nexport const programManager = ProgramManager.getInstance();","import { Day } from '../types';\nimport { programManager } from '../program';\n\nexport class ViewHome extends HTMLElement {\n  private days: Day[] = [];\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  async connectedCallback() {\n    this.days = await programManager.getAllDays();\n    this.render();\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          padding: 16px;\n        }\n\n        h1 {\n          font-size: 28px;\n          font-weight: 700;\n          margin: 0 0 8px 0;\n          color: var(--text-primary);\n        }\n\n        .subtitle {\n          font-size: 16px;\n          color: var(--text-secondary);\n          margin-bottom: 32px;\n        }\n\n        .day-cards {\n          display: flex;\n          flex-direction: column;\n          gap: 16px;\n        }\n\n        .day-card {\n          background: var(--bg-secondary);\n          border-radius: 12px;\n          padding: 20px;\n          cursor: pointer;\n          border: 2px solid transparent;\n          transition: all 0.2s;\n        }\n\n        .day-card:hover {\n          border-color: var(--accent);\n          transform: translateY(-2px);\n        }\n\n        .day-number {\n          display: inline-block;\n          width: 32px;\n          height: 32px;\n          background: var(--accent);\n          color: white;\n          border-radius: 8px;\n          text-align: center;\n          line-height: 32px;\n          font-weight: 600;\n          margin-bottom: 12px;\n        }\n\n        .day-title {\n          font-size: 18px;\n          font-weight: 600;\n          color: var(--text-primary);\n          margin-bottom: 8px;\n        }\n\n        .day-summary {\n          font-size: 14px;\n          color: var(--text-secondary);\n          line-height: 1.5;\n        }\n\n        .day-blocks {\n          display: flex;\n          gap: 8px;\n          margin-top: 12px;\n          flex-wrap: wrap;\n        }\n\n        .block-badge {\n          background: var(--bg-primary);\n          color: var(--text-secondary);\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 11px;\n          font-weight: 500;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n        }\n\n        :host {\n          --bg-primary: #000000;\n          --bg-secondary: #1a1a1a;\n          --text-primary: #ffffff;\n          --text-secondary: #999999;\n          --border: #333333;\n          --accent: #007AFF;\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n          }\n        }\n      </style>\n\n      <h1>Minimalift</h1>\n      <div class=\"subtitle\">3-Day Full Body Program</div>\n      \n      <div class=\"day-cards\">\n        ${this.days.map(day => this.renderDayCard(day)).join('')}\n      </div>\n    `;\n\n    // Add click handlers\n    this.shadowRoot.querySelectorAll('.day-card').forEach(card => {\n      card.addEventListener('click', (e) => {\n        const dayId = (e.currentTarget as HTMLElement).dataset.dayId;\n        if (dayId) {\n          this.dispatchEvent(new CustomEvent('navigate-to-day', {\n            detail: { dayId },\n            bubbles: true,\n            composed: true\n          }));\n        }\n      });\n    });\n  }\n\n  private renderDayCard(day: Day): string {\n    const blockTypes = [...new Set(day.blocks.map(b => b.type))];\n    const exerciseCount = day.blocks.reduce((sum, block) => sum + block.exercises.length, 0);\n\n    return `\n      <div class=\"day-card\" data-day-id=\"${day.dayId}\">\n        <div class=\"day-number\">${day.order}</div>\n        <div class=\"day-title\">${day.title}</div>\n        <div class=\"day-summary\">${exerciseCount} exercises • ${day.blocks.length} blocks</div>\n        \n        <div class=\"day-blocks\">\n          ${blockTypes.map(type => `<span class=\"block-badge\">${type}</span>`).join('')}\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('view-home', ViewHome);","import { Day, Block, Exercise } from '../types';\nimport { programManager } from '../program';\n\nexport class ViewDay extends HTMLElement {\n  private day: Day | null = null;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n  }\n\n  async loadDay(dayId: string) {\n    this.day = await programManager.getDay(dayId) || null;\n    this.render();\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n\n    if (!this.day) {\n      this.shadowRoot.innerHTML = '<p>Loading...</p>';\n      return;\n    }\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          padding: 16px;\n          padding-bottom: 120px; /* Extra space for fixed button */\n          box-sizing: border-box;\n        }\n\n        h2 {\n          font-size: 24px;\n          font-weight: 600;\n          margin: 0 0 24px 0;\n          color: var(--text-primary);\n        }\n\n        .block {\n          margin-bottom: 32px;\n          background: var(--bg-secondary);\n          border-radius: 12px;\n          padding: 16px;\n        }\n\n        .block-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: 16px;\n        }\n\n        .block-title {\n          font-size: 14px;\n          font-weight: 600;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n          color: var(--text-secondary);\n        }\n\n        .timer-badge {\n          background: var(--accent);\n          color: white;\n          padding: 4px 8px;\n          border-radius: 4px;\n          font-size: 12px;\n          font-weight: 500;\n        }\n\n        .exercise {\n          background: var(--bg-primary);\n          border-radius: 8px;\n          padding: 12px;\n          margin-bottom: 8px;\n        }\n\n        .exercise:last-child {\n          margin-bottom: 0;\n        }\n\n        .exercise-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n\n        .exercise-name {\n          font-size: 16px;\n          font-weight: 500;\n          color: var(--text-primary);\n        }\n\n        .exercise-sets-reps {\n          font-size: 14px;\n          color: var(--accent);\n          font-weight: 500;\n        }\n\n        .exercise-cues {\n          font-size: 13px;\n          color: var(--text-secondary);\n          line-height: 1.4;\n          margin-top: 4px;\n        }\n\n        .substitutes {\n          display: flex;\n          gap: 8px;\n          margin-top: 8px;\n          flex-wrap: wrap;\n        }\n\n        .substitute-chip {\n          background: var(--bg-secondary);\n          color: var(--text-secondary);\n          padding: 4px 8px;\n          border-radius: 12px;\n          font-size: 12px;\n          border: 1px solid var(--border);\n          cursor: pointer;\n        }\n\n        .substitute-chip:hover {\n          background: var(--accent);\n          color: white;\n          border-color: var(--accent);\n        }\n\n        .start-session-btn {\n          position: fixed;\n          bottom: 24px;\n          left: 50%;\n          transform: translateX(-50%);\n          background: var(--accent);\n          color: white;\n          border: none;\n          padding: 16px 32px;\n          border-radius: 24px;\n          font-size: 16px;\n          font-weight: 600;\n          cursor: pointer;\n          box-shadow: 0 4px 12px rgba(0, 122, 255, 0.3);\n          z-index: 100;\n        }\n\n        :host {\n          --bg-primary: #000000;\n          --bg-secondary: #1a1a1a;\n          --text-primary: #ffffff;\n          --text-secondary: #999999;\n          --border: #333333;\n          --accent: #007AFF;\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n          }\n        }\n      </style>\n\n      <h2>${this.day.title}</h2>\n      \n      ${this.day.blocks.map(block => this.renderBlock(block)).join('')}\n      \n      <button class=\"start-session-btn\" data-day-id=\"${this.day.dayId}\">\n        Start Session\n      </button>\n    `;\n\n    // Add event listeners\n    this.shadowRoot.querySelector('.start-session-btn')?.addEventListener('click', (e) => {\n      const btn = e.target as HTMLButtonElement;\n      const dayId = btn.dataset.dayId;\n      if (dayId) {\n        this.dispatchEvent(new CustomEvent('start-session', { \n          detail: { dayId },\n          bubbles: true,\n          composed: true\n        }));\n      }\n    });\n\n    // Add substitute click handlers\n    this.shadowRoot.querySelectorAll('.substitute-chip').forEach(chip => {\n      chip.addEventListener('click', (e) => {\n        const el = e.target as HTMLElement;\n        const exerciseId = el.dataset.exerciseId;\n        const substitute = el.dataset.substitute;\n        if (exerciseId && substitute) {\n          console.log('Switch to substitute:', substitute, 'for exercise:', exerciseId);\n          // TODO: Implement substitute switching\n        }\n      });\n    });\n  }\n\n  private renderBlock(block: Block): string {\n    const timerLabel = this.getTimerLabel(block.timerType);\n    \n    return `\n      <div class=\"block\">\n        <div class=\"block-header\">\n          <span class=\"block-title\">${this.getBlockTitle(block.type)}</span>\n          ${timerLabel ? `<span class=\"timer-badge\">${timerLabel}</span>` : ''}\n        </div>\n        \n        ${block.exercises.map(exercise => this.renderExercise(exercise)).join('')}\n      </div>\n    `;\n  }\n\n  private renderExercise(exercise: Exercise): string {\n    const setsReps = exercise.sets ? `${exercise.sets} × ${exercise.reps}` : exercise.reps;\n    \n    return `\n      <div class=\"exercise\">\n        <div class=\"exercise-header\">\n          <span class=\"exercise-name\">${exercise.name}</span>\n          <span class=\"exercise-sets-reps\">${setsReps}</span>\n        </div>\n        \n        ${exercise.cues ? `<div class=\"exercise-cues\">${exercise.cues}</div>` : ''}\n        \n        ${exercise.substitutes && exercise.substitutes.length > 0 ? `\n          <div class=\"substitutes\">\n            ${exercise.substitutes.map(sub => `\n              <span class=\"substitute-chip\" \n                    data-exercise-id=\"${exercise.id}\" \n                    data-substitute=\"${sub}\">\n                ${sub}\n              </span>\n            `).join('')}\n          </div>\n        ` : ''}\n      </div>\n    `;\n  }\n\n  private getBlockTitle(type: string): string {\n    const titles: Record<string, string> = {\n      warmup: 'Warm Up',\n      strength: 'Strength & Condition',\n      swole: 'Swole & Flexy',\n      accessory: 'Accessories'\n    };\n    return titles[type] || type;\n  }\n\n  private getTimerLabel(timerType: string): string {\n    const labels: Record<string, string> = {\n      interval: 'Interval',\n      work_rest: 'Work/Rest',\n      circuit: 'Circuit',\n      tabata: 'Tabata',\n      stopwatch: 'Stopwatch',\n      none: ''\n    };\n    return labels[timerType] || '';\n  }\n}\n\ncustomElements.define('view-day', ViewDay);","/**\n * Base class for all Web Components in the application.\n * Provides common functionality and lifecycle methods.\n */\nexport abstract class BaseComponent extends HTMLElement {\n  protected shadow: ShadowRoot;\n\n  constructor() {\n    super();\n    this.shadow = this.attachShadow({ mode: 'open' });\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n  }\n\n  disconnectedCallback() {\n    this.cleanup();\n  }\n\n  /**\n   * Render the component's HTML and styles.\n   * Must be implemented by subclasses.\n   */\n  protected abstract render(): void;\n\n  /**\n   * Set up event listeners for the component.\n   * Override in subclasses to add specific listeners.\n   */\n  protected setupEventListeners(): void {\n    // Default: no event listeners\n  }\n\n  /**\n   * Clean up resources when component is removed.\n   * Override in subclasses to clean up timers, observers, etc.\n   */\n  protected cleanup(): void {\n    // Default: no cleanup needed\n  }\n\n  /**\n   * Helper method to update innerHTML safely\n   */\n  protected setHTML(html: string): void {\n    if (this.shadow) {\n      this.shadow.innerHTML = html;\n    }\n  }\n\n  /**\n   * Helper method to dispatch custom events\n   */\n  protected emit(eventName: string, detail?: any): void {\n    this.dispatchEvent(new CustomEvent(eventName, { \n      detail, \n      bubbles: true, \n      composed: true \n    }));\n  }\n\n  /**\n   * Helper method to query shadow DOM\n   */\n  protected $(selector: string): Element | null {\n    return this.shadow?.querySelector(selector) ?? null;\n  }\n\n  /**\n   * Helper method to query all in shadow DOM\n   */\n  protected $$(selector: string): NodeListOf<Element> {\n    return this.shadow?.querySelectorAll(selector) ?? [];\n  }\n}","import { Day, Block, Exercise } from '../types';\n\n/**\n * Manages the state of a workout session.\n * Tracks current position, progression, and provides navigation methods.\n */\nexport class SessionState {\n  private day: Day | null = null;\n  private blockIndex = 0;\n  private exerciseIndex = 0;\n  private setIndex = 0;\n  private isRestingBetweenSets = false;\n  private sessionStartTime = 0;\n\n  /**\n   * Initialize session with a workout day\n   */\n  initialize(day: Day): void {\n    this.day = day;\n    this.blockIndex = 0;\n    this.exerciseIndex = 0;\n    this.setIndex = 0;\n    this.isRestingBetweenSets = false;\n    this.sessionStartTime = Date.now();\n  }\n\n  /**\n   * Get current workout day\n   */\n  getDay(): Day | null {\n    return this.day;\n  }\n\n  /**\n   * Get current block\n   */\n  getCurrentBlock(): Block | null {\n    if (!this.day || this.blockIndex >= this.day.blocks.length) {\n      return null;\n    }\n    return this.day.blocks[this.blockIndex];\n  }\n\n  /**\n   * Get current exercise\n   */\n  getCurrentExercise(): Exercise | null {\n    const block = this.getCurrentBlock();\n    if (!block || this.exerciseIndex >= block.exercises.length) {\n      return null;\n    }\n    return block.exercises[this.exerciseIndex];\n  }\n\n  /**\n   * Get next exercise (for preview)\n   */\n  getNextExercise(): Exercise | null {\n    const block = this.getCurrentBlock();\n    if (!block) return null;\n\n    // Check if there's another exercise in current block\n    if (this.exerciseIndex + 1 < block.exercises.length) {\n      return block.exercises[this.exerciseIndex + 1];\n    }\n\n    // Check next block\n    if (this.day && this.blockIndex + 1 < this.day.blocks.length) {\n      const nextBlock = this.day.blocks[this.blockIndex + 1];\n      return nextBlock.exercises[0] || null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Get exercises for current interval (for compound exercises)\n   */\n  getCurrentIntervalExercises(): Exercise[] {\n    const block = this.getCurrentBlock();\n    if (!block || block.timerType !== 'interval') {\n      return [];\n    }\n\n    const exercisesPerInterval = block.timerConfig?.exercisesPerInterval || 1;\n    const startIdx = Math.floor(this.exerciseIndex / exercisesPerInterval) * exercisesPerInterval;\n    return block.exercises.slice(startIdx, startIdx + exercisesPerInterval);\n  }\n\n  /**\n   * Move to next set within current exercise\n   */\n  nextSet(): boolean {\n    const exercise = this.getCurrentExercise();\n    if (!exercise || !exercise.sets) return false;\n\n    if (this.setIndex + 1 < exercise.sets) {\n      this.setIndex++;\n      this.isRestingBetweenSets = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Move to next exercise\n   */\n  nextExercise(): boolean {\n    const block = this.getCurrentBlock();\n    if (!block) return false;\n\n    // Reset set index for new exercise\n    this.setIndex = 0;\n    this.isRestingBetweenSets = false;\n\n    // Move to next exercise\n    if (this.exerciseIndex + 1 < block.exercises.length) {\n      this.exerciseIndex++;\n      return true;\n    }\n\n    // Try moving to next block\n    return this.nextBlock();\n  }\n\n  /**\n   * Skip remaining exercises in an interval group\n   */\n  skipIntervalGroup(): boolean {\n    const block = this.getCurrentBlock();\n    if (!block || block.timerType !== 'interval') {\n      return this.nextExercise();\n    }\n\n    const exercisesPerInterval = block.timerConfig?.exercisesPerInterval || 1;\n    const currentGroup = Math.floor(this.exerciseIndex / exercisesPerInterval);\n    const nextGroupStart = (currentGroup + 1) * exercisesPerInterval;\n\n    if (nextGroupStart < block.exercises.length) {\n      this.exerciseIndex = nextGroupStart;\n      this.setIndex = 0;\n      this.isRestingBetweenSets = false;\n      return true;\n    }\n\n    return this.nextBlock();\n  }\n\n  /**\n   * Move to next block\n   */\n  nextBlock(): boolean {\n    if (!this.day || this.blockIndex + 1 >= this.day.blocks.length) {\n      return false;\n    }\n\n    this.blockIndex++;\n    this.exerciseIndex = 0;\n    this.setIndex = 0;\n    this.isRestingBetweenSets = false;\n    return true;\n  }\n\n  /**\n   * Check if session is complete\n   */\n  isComplete(): boolean {\n    if (!this.day) return true;\n    return this.blockIndex >= this.day.blocks.length;\n  }\n\n  /**\n   * Get session progress info\n   */\n  getProgress(): { current: number; total: number; percentage: number } {\n    if (!this.day) {\n      return { current: 0, total: 0, percentage: 0 };\n    }\n\n    const totalExercises = this.day.blocks.reduce(\n      (sum, block) => sum + block.exercises.length, \n      0\n    );\n\n    const completedExercises = this.day.blocks\n      .slice(0, this.blockIndex)\n      .reduce((sum, block) => sum + block.exercises.length, 0) + \n      this.exerciseIndex;\n\n    const percentage = totalExercises > 0 \n      ? Math.round((completedExercises / totalExercises) * 100)\n      : 0;\n\n    return {\n      current: completedExercises,\n      total: totalExercises,\n      percentage\n    };\n  }\n\n  /**\n   * Get current indices for external use\n   */\n  getIndices(): {\n    blockIndex: number;\n    exerciseIndex: number;\n    setIndex: number;\n  } {\n    return {\n      blockIndex: this.blockIndex,\n      exerciseIndex: this.exerciseIndex,\n      setIndex: this.setIndex\n    };\n  }\n\n  /**\n   * Set rest state\n   */\n  setResting(resting: boolean): void {\n    this.isRestingBetweenSets = resting;\n  }\n\n  /**\n   * Check if currently resting\n   */\n  isResting(): boolean {\n    return this.isRestingBetweenSets;\n  }\n\n  /**\n   * Get current set number (1-based for display)\n   */\n  getCurrentSetNumber(): number {\n    return this.setIndex + 1;\n  }\n\n  /**\n   * Get session duration in milliseconds\n   */\n  getSessionDuration(): number {\n    return Date.now() - this.sessionStartTime;\n  }\n\n  /**\n   * Reset session state\n   */\n  reset(): void {\n    this.blockIndex = 0;\n    this.exerciseIndex = 0;\n    this.setIndex = 0;\n    this.isRestingBetweenSets = false;\n    this.sessionStartTime = Date.now();\n  }\n}","import { Day, Block, Exercise } from '../types';\n\n/**\n * Handles all HTML rendering for the session view.\n * Pure functions that take data and return HTML strings.\n */\nexport class SessionRenderer {\n  /**\n   * Render the session header with title and progress\n   */\n  static renderHeader(day: Day | null, progress: { percentage: number }): string {\n    if (!day) return '';\n\n    return `\n      <div class=\"session-header\">\n        <div class=\"session-title\">${day.title}</div>\n        <div class=\"session-progress\">\n          <div class=\"progress-bar\" style=\"width: ${progress.percentage}%\"></div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render current exercises (handles compound exercises for intervals)\n   */\n  static renderCurrentExercises(\n    exercises: Exercise[], \n    block: Block | null,\n    setNumber?: number\n  ): string {\n    if (!exercises.length || !block) return '';\n\n    // Multiple exercises (compound/interval)\n    if (exercises.length > 1) {\n      return `\n        <div class=\"current-exercise\">\n          ${exercises.map(ex => `\n            <div class=\"exercise-group\">\n              <div class=\"exercise-name\">${ex.name}</div>\n              <div class=\"exercise-details\">${this.formatExerciseDetails(ex, block)}</div>\n            </div>\n          `).join('')}\n        </div>\n      `;\n    }\n\n    // Single exercise\n    const exercise = exercises[0];\n    const setInfo = setNumber && exercise.sets \n      ? `<div class=\"set-counter\">Set ${setNumber} of ${exercise.sets}</div>`\n      : '';\n\n    return `\n      <div class=\"current-exercise\">\n        <div class=\"exercise-name\">${exercise.name}</div>\n        <div class=\"exercise-details\">${this.formatExerciseDetails(exercise, block)}</div>\n        ${setInfo}\n      </div>\n    `;\n  }\n\n  /**\n   * Render timer information for interval blocks\n   */\n  static renderTimerInfo(block: Block | null): string {\n    if (!block || !block.timerConfig) return '';\n\n    const config = block.timerConfig;\n    let info = '';\n\n    if (block.timerType === 'interval' && config.intervalSec) {\n      const minutes = config.intervalSec >= 60 ? Math.floor(config.intervalSec / 60) : 0;\n      const timeStr = minutes > 0 ? `${minutes} min` : `${config.intervalSec}s`;\n      const exerciseCount = config.exercisesPerInterval || 1;\n      const exerciseStr = exerciseCount > 1 ? `${exerciseCount} exercises` : '1 exercise';\n      \n      info = `Every ${timeStr} • ${exerciseStr} per interval`;\n    } else if (block.timerType === 'work_rest') {\n      info = config.workSec ? `Work: ${config.workSec}s` : '';\n      if (config.restSec) {\n        info += info ? ` • Rest: ${config.restSec}s` : `Rest: ${config.restSec}s`;\n      }\n    } else if (block.timerType === 'circuit' && config.stations) {\n      info = `${config.stations.length} stations`;\n    }\n\n    return info ? `<div class=\"timer-info\">${info}</div>` : '';\n  }\n\n  /**\n   * Render control buttons based on current state\n   */\n  static renderControls(\n    isRunning: boolean,\n    isPaused: boolean,\n    isResting: boolean,\n    hasTimer: boolean,\n    isIntervalBlock: boolean,\n    hasMultipleExercises: boolean\n  ): string {\n    const buttons: string[] = [];\n\n    if (hasTimer) {\n      if (!isRunning) {\n        const label = isIntervalBlock ? 'Start Round' : 'Start Exercise';\n        buttons.push(`\n          <button class=\"control-btn primary\" data-action=\"start\">\n            ${label}\n          </button>\n        `);\n      } else if (isPaused) {\n        buttons.push(`\n          <button class=\"control-btn primary\" data-action=\"resume\">\n            Resume\n          </button>\n        `);\n      } else {\n        buttons.push(`\n          <button class=\"control-btn secondary\" data-action=\"pause\">\n            Pause\n          </button>\n        `);\n      }\n\n      if (isRunning || isPaused) {\n        buttons.push(`\n          <button class=\"control-btn secondary\" data-action=\"reset\">\n            Reset\n          </button>\n        `);\n      }\n    } else if (isResting) {\n      buttons.push(`\n        <button class=\"control-btn primary\" data-action=\"skip-rest\">\n          Skip Rest\n        </button>\n      `);\n    } else {\n      buttons.push(`\n        <button class=\"control-btn primary\" data-action=\"complete-set\">\n          Complete Set\n        </button>\n      `);\n    }\n\n    // Skip button\n    if (isIntervalBlock && hasMultipleExercises) {\n      buttons.push(`\n        <button class=\"control-btn secondary\" data-action=\"skip-group\">\n          Skip Round\n        </button>\n      `);\n    } else {\n      buttons.push(`\n        <button class=\"control-btn secondary\" data-action=\"skip\">\n          Skip Exercise\n        </button>\n      `);\n    }\n\n    return `\n      <div class=\"session-controls\">\n        ${buttons.join('')}\n      </div>\n    `;\n  }\n\n  /**\n   * Render next up preview\n   */\n  static renderNextUp(exercise: Exercise | null): string {\n    if (!exercise) return '';\n\n    return `\n      <div class=\"next-up\">\n        <div class=\"next-label\">Next Up</div>\n        <div class=\"next-exercise\">${exercise.name}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render session complete screen\n   */\n  static renderSessionComplete(): string {\n    return `\n      <div class=\"session-complete\">\n        <div class=\"complete-icon\">✓</div>\n        <h2>Workout Complete!</h2>\n        <p>Great job! Your workout has been completed.</p>\n        <button class=\"control-btn primary\" data-action=\"finish\">\n          Finish Session\n        </button>\n      </div>\n    `;\n  }\n\n  /**\n   * Render save/discard dialog\n   */\n  static renderSaveDialog(): string {\n    return `\n      <div class=\"session-save-overlay\">\n        <div class=\"session-save-dialog\">\n          <h3>Save Workout?</h3>\n          <p>Would you like to save this workout session?</p>\n          <div class=\"dialog-buttons\">\n            <button class=\"control-btn primary\" data-action=\"save\">\n              Save Session\n            </button>\n            <button class=\"control-btn secondary\" data-action=\"discard\">\n              Discard\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render rest timer display\n   */\n  static renderRestTimer(remainingSeconds: number): string {\n    return `\n      <div class=\"rest-timer\">\n        <div class=\"rest-label\">REST</div>\n        <div class=\"rest-countdown\">${remainingSeconds}</div>\n        <button class=\"control-btn secondary\" data-action=\"skip-rest\">\n          Skip Rest\n        </button>\n      </div>\n    `;\n  }\n\n  /**\n   * Format exercise details (sets x reps, cues)\n   */\n  private static formatExerciseDetails(exercise: Exercise, block: Block): string {\n    const parts: string[] = [];\n    \n    if (block.timerType === 'interval' && block.timerConfig?.rounds) {\n      parts.push(`${block.timerConfig.rounds} rounds × ${exercise.reps || '?'} reps`);\n    } else if (exercise.sets && exercise.reps) {\n      parts.push(`${exercise.sets} × ${exercise.reps}`);\n    } else if (exercise.reps) {\n      parts.push(exercise.reps);\n    }\n\n    if (exercise.cues) {\n      parts.push(`<span class=\"exercise-cues\">${exercise.cues}</span>`);\n    }\n\n    return parts.join(' • ');\n  }\n\n  /**\n   * Render the main session container with all sections\n   */\n  static renderContainer(sections: {\n    header?: string;\n    exercises?: string;\n    timerInfo?: string;\n    timer?: string;\n    controls?: string;\n    nextUp?: string;\n  }): string {\n    return `\n      <div class=\"session-container\">\n        ${sections.header || ''}\n        <div class=\"session-main\">\n          ${sections.exercises || ''}\n          ${sections.timerInfo || ''}\n          ${sections.timer || '<div id=\"timer-display\"></div>'}\n          ${sections.controls || ''}\n          ${sections.nextUp || ''}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Render empty state\n   */\n  static renderEmpty(): string {\n    return `\n      <div class=\"session-empty\">\n        <p>No workout loaded</p>\n      </div>\n    `;\n  }\n}","export type TimerState = 'idle' | 'running' | 'paused' | 'completed';\n\nexport interface TimerEvent {\n  type: 'tick' | 'roundComplete' | 'complete' | 'stateChange';\n  elapsed: number;\n  remaining: number;\n  round?: number;\n  totalRounds?: number;\n  state: TimerState;\n}\n\nexport type TimerCallback = (event: TimerEvent) => void;\n\nexport abstract class BaseTimer {\n  protected startTime: number = 0;\n  protected pausedTime: number = 0;\n  protected totalPausedDuration: number = 0;\n  protected intervalId: number | null = null;\n  protected state: TimerState = 'idle';\n  protected callbacks: TimerCallback[] = [];\n\n  constructor(protected readonly tickInterval: number = 100) {}\n\n  abstract getDuration(): number;\n  abstract getCurrentRound(): number;\n  abstract getTotalRounds(): number;\n  abstract getTimeInCurrentPeriod(): number;\n  abstract getRemainingInCurrentPeriod(): number;\n\n  start(): void {\n    if (this.state === 'running') return;\n\n    if (this.state === 'paused') {\n      // Resume from pause\n      this.totalPausedDuration += performance.now() - this.pausedTime;\n    } else {\n      // Fresh start\n      this.startTime = performance.now();\n      this.totalPausedDuration = 0;\n    }\n\n    this.state = 'running';\n    this.intervalId = window.setInterval(() => this.tick(), this.tickInterval);\n    this.notifyStateChange();\n  }\n\n  pause(): void {\n    if (this.state !== 'running') return;\n\n    this.state = 'paused';\n    this.pausedTime = performance.now();\n    \n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n    \n    this.notifyStateChange();\n  }\n\n  reset(): void {\n    this.stop();\n    this.state = 'idle';\n    this.startTime = 0;\n    this.pausedTime = 0;\n    this.totalPausedDuration = 0;\n    this.notifyStateChange();\n  }\n\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  getState(): TimerState {\n    return this.state;\n  }\n\n  getElapsedTime(): number {\n    if (this.startTime === 0) return 0;\n\n    const now = this.state === 'paused' ? this.pausedTime : performance.now();\n    return now - this.startTime - this.totalPausedDuration;\n  }\n\n  addCallback(callback: TimerCallback): void {\n    this.callbacks.push(callback);\n  }\n\n  removeCallback(callback: TimerCallback): void {\n    const index = this.callbacks.indexOf(callback);\n    if (index > -1) {\n      this.callbacks.splice(index, 1);\n    }\n  }\n\n  protected tick(): void {\n    const elapsed = this.getElapsedTime();\n    const remainingInPeriod = this.getRemainingInCurrentPeriod();\n    const currentRound = this.getCurrentRound();\n    const totalRounds = this.getTotalRounds();\n\n    // Check if timer is complete with tolerance to avoid display/completion mismatch\n    const duration = this.getDuration();\n    if (elapsed >= duration - 100) { // 100ms tolerance\n      this.state = 'completed';\n      this.stop();\n      \n      this.notifyCallbacks({\n        type: 'complete',\n        elapsed: duration,\n        remaining: 0,\n        round: currentRound,\n        totalRounds,\n        state: this.state\n      });\n      return;\n    }\n\n    // Check for round completion (depends on timer type)\n    const previousRound = this.getPreviousRound(elapsed - this.tickInterval);\n    if (currentRound > previousRound && previousRound > 0) {\n      this.notifyCallbacks({\n        type: 'roundComplete',\n        elapsed,\n        remaining: remainingInPeriod,\n        round: previousRound,\n        totalRounds,\n        state: this.state\n      });\n    }\n\n    // Regular tick update\n    this.notifyCallbacks({\n      type: 'tick',\n      elapsed,\n      remaining: remainingInPeriod,\n      round: currentRound,\n      totalRounds,\n      state: this.state\n    });\n  }\n\n  protected abstract getPreviousRound(elapsed: number): number;\n\n  protected notifyCallbacks(event: TimerEvent): void {\n    this.callbacks.forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Timer callback error:', error);\n      }\n    });\n  }\n\n  protected notifyStateChange(): void {\n    const elapsed = this.getElapsedTime();\n    this.notifyCallbacks({\n      type: 'stateChange',\n      elapsed,\n      remaining: this.getRemainingInCurrentPeriod(),\n      round: this.getCurrentRound(),\n      totalRounds: this.getTotalRounds(),\n      state: this.state\n    });\n  }\n\n  // Utility methods for time formatting\n  static formatTime(milliseconds: number): string {\n    // When very close to 0, show 0 instead of rounding up to 1\n    const totalSeconds = milliseconds <= 100 ? 0 : Math.max(0, Math.ceil(milliseconds / 1000));\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }\n\n  static formatTimeWithMs(milliseconds: number): string {\n    const totalMs = Math.max(0, milliseconds);\n    const seconds = Math.floor(totalMs / 1000);\n    const ms = Math.floor((totalMs % 1000) / 100);\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}.${ms}`;\n  }\n}","import { BaseTimer } from './timer-engine';\n\nexport class IntervalTimer extends BaseTimer {\n  private currentRound: number = 1;\n  \n  constructor(\n    private intervalSec: number,\n    private totalRounds: number,\n    private exercisesPerInterval: number = 1\n  ) {\n    super();\n  }\n\n  getDuration(): number {\n    return this.intervalSec * this.totalRounds * 1000;\n  }\n\n  getCurrentRound(): number {\n    const elapsed = this.getElapsedTime();\n    return Math.min(Math.floor(elapsed / (this.intervalSec * 1000)) + 1, this.totalRounds);\n  }\n\n  getTotalRounds(): number {\n    return this.totalRounds;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    return elapsed % (this.intervalSec * 1000);\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    return (this.intervalSec * 1000) - this.getTimeInCurrentPeriod();\n  }\n\n  getExercisesPerInterval(): number {\n    return this.exercisesPerInterval;\n  }\n\n  protected getPreviousRound(elapsed: number): number {\n    return Math.min(Math.floor(elapsed / (this.intervalSec * 1000)) + 1, this.totalRounds);\n  }\n\n  protected tick(): void {\n    const elapsed = this.getElapsedTime();\n    const remaining = this.getDuration() - elapsed;\n    const currentRound = this.getCurrentRound();\n\n    if (remaining <= 0) {\n      this.state = 'completed';\n      this.stop();\n      this.notifyCallbacks({\n        type: 'complete',\n        elapsed,\n        remaining,\n        round: currentRound,\n        totalRounds: this.totalRounds,\n        state: this.state\n      });\n      return;\n    }\n\n    if (currentRound > this.currentRound) {\n      this.currentRound = currentRound;\n      this.notifyCallbacks({\n        type: 'roundComplete',\n        elapsed,\n        remaining,\n        round: currentRound - 1,\n        totalRounds: this.totalRounds,\n        state: this.state\n      });\n    }\n\n    this.notifyCallbacks({\n      type: 'tick',\n      elapsed,\n      remaining,\n      round: currentRound,\n      totalRounds: this.totalRounds,\n      state: this.state\n    });\n  }\n}","import { BaseTimer } from './timer-engine';\n\nexport class WorkRestTimer extends BaseTimer {\n  private currentSet: number = 1;\n  private isWorkPhase: boolean = true;\n  \n  constructor(\n    private workSec: number,\n    private restSec: number,\n    private totalSets: number\n  ) {\n    super();\n  }\n\n  getDuration(): number {\n    return (this.workSec + this.restSec) * this.totalSets * 1000;\n  }\n\n  getCurrentRound(): number {\n    return this.currentSet;\n  }\n\n  getTotalRounds(): number {\n    return this.totalSets;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = (this.workSec + this.restSec) * 1000;\n    const timeInSet = elapsed % periodDuration;\n    \n    if (timeInSet < this.workSec * 1000) {\n      return timeInSet;\n    } else {\n      return timeInSet - (this.workSec * 1000);\n    }\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = (this.workSec + this.restSec) * 1000;\n    const timeInSet = elapsed % periodDuration;\n    \n    if (timeInSet < this.workSec * 1000) {\n      return (this.workSec * 1000) - timeInSet;\n    } else {\n      return (this.restSec * 1000) - (timeInSet - this.workSec * 1000);\n    }\n  }\n\n  isInWorkPhase(): boolean {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = (this.workSec + this.restSec) * 1000;\n    const timeInSet = elapsed % periodDuration;\n    return timeInSet < this.workSec * 1000;\n  }\n\n  protected getPreviousRound(elapsed: number): number {\n    return Math.min(Math.floor(elapsed / ((this.workSec + this.restSec) * 1000)) + 1, this.totalSets);\n  }\n\n  protected tick(): void {\n    const elapsed = this.getElapsedTime();\n    const remaining = this.getDuration() - elapsed;\n    const currentSet = Math.min(Math.floor(elapsed / ((this.workSec + this.restSec) * 1000)) + 1, this.totalSets);\n    const wasWorkPhase = this.isWorkPhase;\n    this.isWorkPhase = this.isInWorkPhase();\n\n    // Check for completion with a small tolerance to avoid display/completion mismatch\n    if (remaining <= 100) { // 100ms tolerance\n      this.state = 'completed';\n      this.stop();\n      \n      this.notifyCallbacks({\n        type: 'complete',\n        elapsed: this.getDuration(),\n        remaining: 0,\n        round: this.totalSets,\n        totalRounds: this.totalSets,\n        state: this.state\n      });\n      return;\n    }\n\n    if (currentSet > this.currentSet) {\n      this.currentSet = currentSet;\n      this.notifyCallbacks({\n        type: 'roundComplete',\n        elapsed,\n        remaining,\n        round: currentSet - 1,\n        totalRounds: this.totalSets,\n        state: this.state\n      });\n    } else if (wasWorkPhase && !this.isWorkPhase) {\n      // Transitioned from work to rest\n      this.notifyCallbacks({\n        type: 'tick',\n        elapsed,\n        remaining,\n        round: currentSet,\n        totalRounds: this.totalSets,\n        state: this.state\n      });\n    }\n\n    this.notifyCallbacks({\n      type: 'tick',\n      elapsed,\n      remaining,\n      round: currentSet,\n      totalRounds: this.totalSets,\n      state: this.state\n    });\n  }\n}","import { BaseTimer } from './timer-engine';\n\nexport interface Station {\n  name: string;\n  durationSec: number;\n}\n\nexport class CircuitTimer extends BaseTimer {\n  private currentRound: number = 1;\n  private currentStationIndex: number = 0;\n  \n  constructor(\n    private stations: Station[],\n    private totalRounds: number,\n    private transitionSec: number = 0\n  ) {\n    super();\n  }\n\n  getDuration(): number {\n    const stationTime = this.stations.reduce((sum, s) => sum + s.durationSec, 0);\n    const transitionTime = this.transitionSec * Math.max(0, this.stations.length - 1);\n    return (stationTime + transitionTime) * this.totalRounds * 1000;\n  }\n\n  getCurrentRound(): number {\n    return this.currentRound;\n  }\n\n  getTotalRounds(): number {\n    return this.totalRounds;\n  }\n\n  getCurrentStation(): Station | null {\n    if (this.currentStationIndex < this.stations.length) {\n      return this.stations[this.currentStationIndex];\n    }\n    return null;\n  }\n\n  getCurrentStationIndex(): number {\n    return this.currentStationIndex;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    const roundDuration = this.getRoundDuration();\n    const timeInRound = elapsed % roundDuration;\n    \n    let accumulated = 0;\n    for (let i = 0; i < this.stations.length; i++) {\n      const stationDuration = this.stations[i].durationSec * 1000;\n      if (timeInRound < accumulated + stationDuration) {\n        return timeInRound - accumulated;\n      }\n      accumulated += stationDuration;\n      \n      if (i < this.stations.length - 1) {\n        const transitionDuration = this.transitionSec * 1000;\n        if (timeInRound < accumulated + transitionDuration) {\n          return timeInRound - accumulated;\n        }\n        accumulated += transitionDuration;\n      }\n    }\n    \n    return 0;\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    const station = this.getCurrentStation();\n    if (!station) return 0;\n    \n    const isTransition = this.isInTransition();\n    const periodDuration = isTransition ? this.transitionSec * 1000 : station.durationSec * 1000;\n    return periodDuration - this.getTimeInCurrentPeriod();\n  }\n\n  isInTransition(): boolean {\n    const elapsed = this.getElapsedTime();\n    const roundDuration = this.getRoundDuration();\n    const timeInRound = elapsed % roundDuration;\n    \n    let accumulated = 0;\n    for (let i = 0; i < this.stations.length; i++) {\n      accumulated += this.stations[i].durationSec * 1000;\n      if (timeInRound < accumulated) {\n        return false;\n      }\n      \n      if (i < this.stations.length - 1) {\n        accumulated += this.transitionSec * 1000;\n        if (timeInRound < accumulated) {\n          return true;\n        }\n      }\n    }\n    \n    return false;\n  }\n\n  private getRoundDuration(): number {\n    const stationTime = this.stations.reduce((sum, s) => sum + s.durationSec * 1000, 0);\n    const transitionTime = this.transitionSec * Math.max(0, this.stations.length - 1) * 1000;\n    return stationTime + transitionTime;\n  }\n\n  private updateCurrentPosition(): void {\n    const elapsed = this.getElapsedTime();\n    const roundDuration = this.getRoundDuration();\n    \n    this.currentRound = Math.min(Math.floor(elapsed / roundDuration) + 1, this.totalRounds);\n    const timeInRound = elapsed % roundDuration;\n    \n    let accumulated = 0;\n    for (let i = 0; i < this.stations.length; i++) {\n      accumulated += this.stations[i].durationSec * 1000;\n      if (timeInRound < accumulated) {\n        this.currentStationIndex = i;\n        return;\n      }\n      \n      if (i < this.stations.length - 1) {\n        accumulated += this.transitionSec * 1000;\n        if (timeInRound < accumulated) {\n          this.currentStationIndex = i;\n          return;\n        }\n      }\n    }\n    \n    this.currentStationIndex = this.stations.length - 1;\n  }\n\n  protected getPreviousRound(elapsed: number): number {\n    const roundDuration = this.getRoundDuration();\n    return Math.min(Math.floor(elapsed / roundDuration) + 1, this.totalRounds);\n  }\n\n  protected tick(): void {\n    const elapsed = this.getElapsedTime();\n    const remaining = this.getDuration() - elapsed;\n    \n    if (remaining <= 0) {\n      this.state = 'completed'; this.stop();\n      return;\n    }\n\n    const prevRound = this.currentRound;\n    // const prevStation = this.currentStationIndex;\n    this.updateCurrentPosition();\n\n    if (this.currentRound > prevRound) {\n      this.notifyCallbacks({\n        type: 'roundComplete',\n        elapsed,\n        remaining,\n        round: prevRound,\n        totalRounds: this.totalRounds,\n        state: this.state\n      });\n    }\n\n    this.notifyCallbacks({\n      type: 'tick',\n      elapsed,\n      remaining,\n      round: this.currentRound,\n      totalRounds: this.totalRounds,\n      state: this.state\n    });\n  }\n}","import { BaseTimer } from './timer-engine';\n\nexport class TabataTimer extends BaseTimer {\n  private currentRound: number = 1;\n  \n  constructor(\n    private highIntensitySec: number,\n    private lowIntensitySec: number,\n    private totalRounds: number\n  ) {\n    super();\n  }\n\n  getDuration(): number {\n    return (this.highIntensitySec + this.lowIntensitySec) * this.totalRounds * 1000;\n  }\n\n  getCurrentRound(): number {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = (this.highIntensitySec + this.lowIntensitySec) * 1000;\n    return Math.min(Math.floor(elapsed / periodDuration) + 1, this.totalRounds);\n  }\n\n  getTotalRounds(): number {\n    return this.totalRounds;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = (this.highIntensitySec + this.lowIntensitySec) * 1000;\n    const timeInRound = elapsed % periodDuration;\n    \n    if (timeInRound < this.highIntensitySec * 1000) {\n      return timeInRound;\n    } else {\n      return timeInRound - (this.highIntensitySec * 1000);\n    }\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = (this.highIntensitySec + this.lowIntensitySec) * 1000;\n    const timeInRound = elapsed % periodDuration;\n    \n    if (timeInRound < this.highIntensitySec * 1000) {\n      return (this.highIntensitySec * 1000) - timeInRound;\n    } else {\n      return (this.lowIntensitySec * 1000) - (timeInRound - this.highIntensitySec * 1000);\n    }\n  }\n\n  isHighIntensity(): boolean {\n    const elapsed = this.getElapsedTime();\n    const periodDuration = (this.highIntensitySec + this.lowIntensitySec) * 1000;\n    const timeInRound = elapsed % periodDuration;\n    return timeInRound < this.highIntensitySec * 1000;\n  }\n\n  protected getPreviousRound(elapsed: number): number {\n    const periodDuration = (this.highIntensitySec + this.lowIntensitySec) * 1000;\n    return Math.min(Math.floor(elapsed / periodDuration) + 1, this.totalRounds);\n  }\n\n  protected tick(): void {\n    const elapsed = this.getElapsedTime();\n    const remaining = this.getDuration() - elapsed;\n    const currentRound = this.getCurrentRound();\n\n    if (remaining <= 0) {\n      this.state = 'completed'; this.stop();\n      return;\n    }\n\n    if (currentRound > this.currentRound) {\n      this.currentRound = currentRound;\n      this.notifyCallbacks({\n        type: 'roundComplete',\n        elapsed,\n        remaining,\n        round: currentRound - 1,\n        totalRounds: this.totalRounds,\n        state: this.state\n      });\n    }\n\n    this.notifyCallbacks({\n      type: 'tick',\n      elapsed,\n      remaining,\n      round: currentRound,\n      totalRounds: this.totalRounds,\n      state: this.state\n    });\n  }\n}","import { BaseTimer } from './timer-engine';\n\nexport class StopwatchTimer extends BaseTimer {\n  private laps: number[] = [];\n  \n  constructor() {\n    super();\n  }\n\n  getDuration(): number {\n    // Stopwatch has no fixed duration\n    return Number.MAX_SAFE_INTEGER;\n  }\n\n  getCurrentRound(): number {\n    return this.laps.length + 1;\n  }\n\n  getTotalRounds(): number {\n    // No fixed number of rounds for stopwatch\n    return 0;\n  }\n\n  getTimeInCurrentPeriod(): number {\n    const elapsed = this.getElapsedTime();\n    const lastLapTime = this.laps.length > 0 ? this.laps[this.laps.length - 1] : 0;\n    return elapsed - lastLapTime;\n  }\n\n  getRemainingInCurrentPeriod(): number {\n    // Stopwatch doesn't have a remaining time\n    return 0;\n  }\n\n  addLap(): void {\n    const elapsed = this.getElapsedTime();\n    this.laps.push(elapsed);\n    \n    this.notifyCallbacks({\n      type: 'roundComplete',\n      elapsed,\n      remaining: 0,\n      round: this.laps.length,\n      totalRounds: 0,\n      state: this.state\n    });\n  }\n\n  getLaps(): number[] {\n    return [...this.laps];\n  }\n\n  getLapTime(index: number): number {\n    if (index < 0 || index >= this.laps.length) return 0;\n    \n    const lapTime = this.laps[index];\n    const previousLapTime = index > 0 ? this.laps[index - 1] : 0;\n    return lapTime - previousLapTime;\n  }\n\n  reset(): void {\n    super.reset();\n    this.laps = [];\n  }\n\n  protected getPreviousRound(_elapsed: number): number {\n    // Stopwatch doesn't have traditional rounds\n    return this.laps.length;\n  }\n\n  protected tick(): void {\n    const elapsed = this.getElapsedTime();\n    \n    this.notifyCallbacks({\n      type: 'tick',\n      elapsed,\n      remaining: 0,\n      round: this.laps.length + 1,\n      totalRounds: 0,\n      state: this.state\n    });\n  }\n}","import { TimerType, TimerConfig } from '../types';\nimport { BaseTimer } from './timer-engine';\nimport { IntervalTimer } from './interval';\nimport { WorkRestTimer } from './work-rest';\nimport { CircuitTimer } from './circuit';\nimport { TabataTimer } from './tabata';\nimport { StopwatchTimer } from './stopwatch';\n\nexport class TimerFactory {\n  static createTimer(type: TimerType, config?: TimerConfig): BaseTimer | null {\n    if (!config && type !== 'stopwatch') return null;\n\n    switch (type) {\n      case 'interval':\n        if (config?.intervalSec && config?.rounds) {\n          return new IntervalTimer(\n            config.intervalSec,\n            config.rounds,\n            config.exercisesPerInterval || 1\n          );\n        }\n        break;\n\n      case 'work_rest':\n        if (config?.workSec && config?.restSec && config?.rounds) {\n          return new WorkRestTimer(\n            config.workSec,\n            config.restSec,\n            config.rounds\n          );\n        } else if (config?.restSec && config?.rounds) {\n          // Simple rest timer (work phase is 0)\n          return new WorkRestTimer(\n            0,\n            config.restSec,\n            config.rounds\n          );\n        }\n        break;\n\n      case 'circuit':\n        if (config?.stations && config.stations.length > 0 && config?.rounds) {\n          return new CircuitTimer(\n            config.stations,\n            config.rounds,\n            config.transitionSec || 0\n          );\n        }\n        break;\n\n      case 'tabata':\n        if (config?.highIntensitySec && config?.lowIntensitySec && config?.rounds) {\n          return new TabataTimer(\n            config.highIntensitySec,\n            config.lowIntensitySec,\n            config.rounds\n          );\n        }\n        break;\n\n      case 'stopwatch':\n        return new StopwatchTimer();\n\n      case 'none':\n      default:\n        return null;\n    }\n\n    return null;\n  }\n\n  // Convenience method for creating rest timer between sets\n  static createRestTimer(restSeconds: number, sets: number = 1): WorkRestTimer {\n    return new WorkRestTimer(0, restSeconds, sets);\n  }\n}","/**\n * Wake Lock utility for keeping the screen active during workouts\n */\nexport class WakeLockManager {\n  private wakeLock: WakeLockSentinel | null = null;\n  private supported = 'wakeLock' in navigator;\n\n  /**\n   * Request a wake lock to prevent screen from sleeping\n   */\n  async acquire(): Promise<boolean> {\n    if (!this.supported) {\n      console.warn('Wake Lock API not supported');\n      return false;\n    }\n\n    try {\n      if (this.wakeLock) {\n        // Already have an active wake lock\n        return true;\n      }\n\n      this.wakeLock = await (navigator as any).wakeLock.request('screen');\n      \n      this.wakeLock?.addEventListener('release', () => {\n        console.log('Wake lock released');\n        this.wakeLock = null;\n      });\n\n      console.log('Wake lock acquired');\n      return true;\n    } catch (err) {\n      console.error('Failed to acquire wake lock:', err);\n      return false;\n    }\n  }\n\n  /**\n   * Release the current wake lock\n   */\n  async release(): Promise<void> {\n    if (this.wakeLock) {\n      try {\n        await this.wakeLock.release();\n        this.wakeLock = null;\n        console.log('Wake lock released manually');\n      } catch (err) {\n        console.error('Failed to release wake lock:', err);\n      }\n    }\n  }\n\n  /**\n   * Check if wake lock is currently active\n   */\n  isActive(): boolean {\n    return this.wakeLock !== null && !this.wakeLock.released;\n  }\n\n  /**\n   * Check if wake lock API is supported\n   */\n  isSupportedApi(): boolean {\n    return this.supported;\n  }\n\n  /**\n   * Re-acquire wake lock if it was lost (e.g., after tab became inactive)\n   */\n  async reacquire(): Promise<boolean> {\n    if (this.wakeLock && this.wakeLock.released) {\n      this.wakeLock = null;\n      return await this.acquire();\n    }\n    return this.isActive();\n  }\n}\n\nexport const wakeLockManager = new WakeLockManager();","/**\n * Background timer management to handle app going background/foreground\n */\nexport class BackgroundTimerManager {\n  private backgroundStartTime: number | null = null;\n  private callbacks: (() => void)[] = [];\n\n  constructor() {\n    this.setupVisibilityHandlers();\n  }\n\n  private setupVisibilityHandlers() {\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.handleBackground();\n      } else {\n        this.handleForeground();\n      }\n    });\n\n    // Also handle page focus/blur for better coverage\n    window.addEventListener('blur', () => {\n      if (!document.hidden) {\n        this.handleBackground();\n      }\n    });\n\n    window.addEventListener('focus', () => {\n      if (!document.hidden) {\n        this.handleForeground();\n      }\n    });\n  }\n\n  private handleBackground() {\n    console.log('App went to background');\n    this.backgroundStartTime = performance.now();\n    \n    // Show a notification if permissions are granted and we have an active timer\n    this.maybeShowNotification();\n  }\n\n  private handleForeground() {\n    if (this.backgroundStartTime !== null) {\n      const timeInBackground = performance.now() - this.backgroundStartTime;\n      console.log(`App returned to foreground after ${timeInBackground}ms`);\n      \n      this.backgroundStartTime = null;\n      \n      // Notify callbacks that we're back in foreground\n      this.callbacks.forEach(callback => {\n        try {\n          callback();\n        } catch (error) {\n          console.error('Background timer callback error:', error);\n        }\n      });\n    }\n  }\n\n  private async maybeShowNotification() {\n    // Check if we have notification permission\n    if ('Notification' in window && Notification.permission === 'granted') {\n      // Only show if we have an active workout session\n      const isSessionActive = this.callbacks.length > 0;\n      \n      if (isSessionActive) {\n        try {\n          const notification = new Notification('Minimalift Workout Active', {\n            body: 'Your workout timer is still running in the background.',\n            icon: '/icons/icon-192x192.png',\n            badge: '/icons/icon-192x192.png',\n            tag: 'workout-active',\n            requireInteraction: false,\n            silent: true\n          });\n\n          // Auto-close after 5 seconds\n          setTimeout(() => notification.close(), 5000);\n        } catch (error) {\n          console.error('Failed to show notification:', error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a callback to be notified when app returns to foreground\n   */\n  addForegroundCallback(callback: () => void) {\n    this.callbacks.push(callback);\n  }\n\n  /**\n   * Remove a foreground callback\n   */\n  removeForegroundCallback(callback: () => void) {\n    const index = this.callbacks.indexOf(callback);\n    if (index > -1) {\n      this.callbacks.splice(index, 1);\n    }\n  }\n\n  /**\n   * Get time spent in background (if currently in background)\n   */\n  getTimeInBackground(): number {\n    if (this.backgroundStartTime !== null) {\n      return performance.now() - this.backgroundStartTime;\n    }\n    return 0;\n  }\n\n  /**\n   * Check if app is currently in background\n   */\n  isInBackground(): boolean {\n    return document.hidden;\n  }\n\n  /**\n   * Request notification permission if not already granted\n   */\n  async requestNotificationPermission(): Promise<boolean> {\n    if (!('Notification' in window)) {\n      console.warn('Notifications not supported');\n      return false;\n    }\n\n    if (Notification.permission === 'granted') {\n      return true;\n    }\n\n    if (Notification.permission === 'denied') {\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    } catch (error) {\n      console.error('Failed to request notification permission:', error);\n      return false;\n    }\n  }\n}\n\nexport const backgroundTimerManager = new BackgroundTimerManager();","/**\n * Haptic and audio feedback utilities for workout timers\n */\nexport class FeedbackManager {\n  private audioContext: AudioContext | null = null;\n  private enableHaptic = true;\n  private enableAudio = true;\n\n  constructor() {\n    // Initialize audio context on first user interaction\n    document.addEventListener('touchstart', this.initAudioContext.bind(this), { once: true });\n    document.addEventListener('click', this.initAudioContext.bind(this), { once: true });\n  }\n\n  private initAudioContext() {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      console.log('Audio context initialized');\n    } catch (error) {\n      console.warn('Audio context not supported:', error);\n    }\n  }\n\n  /**\n   * Enable or disable haptic feedback\n   */\n  setHapticEnabled(enabled: boolean) {\n    this.enableHaptic = enabled;\n  }\n\n  /**\n   * Enable or disable audio feedback  \n   */\n  setAudioEnabled(enabled: boolean) {\n    this.enableAudio = enabled;\n  }\n\n  /**\n   * Check if haptic feedback is supported\n   */\n  isHapticSupported(): boolean {\n    return 'vibrate' in navigator;\n  }\n\n  /**\n   * Check if audio feedback is supported\n   */\n  isAudioSupported(): boolean {\n    return this.audioContext !== null;\n  }\n\n  /**\n   * Provide haptic feedback\n   */\n  vibrate(pattern: number | number[]) {\n    if (!this.enableHaptic || !this.isHapticSupported()) {\n      return;\n    }\n\n    try {\n      navigator.vibrate(pattern);\n    } catch (error) {\n      console.warn('Vibration failed:', error);\n    }\n  }\n\n  /**\n   * Play a beep sound\n   */\n  beep(frequency: number = 800, duration: number = 200, volume: number = 0.1) {\n    if (!this.enableAudio || !this.audioContext) {\n      return;\n    }\n\n    try {\n      const oscillator = this.audioContext.createOscillator();\n      const gainNode = this.audioContext.createGain();\n\n      oscillator.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n\n      oscillator.frequency.value = frequency;\n      oscillator.type = 'sine';\n      \n      gainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration / 1000);\n\n      oscillator.start();\n      oscillator.stop(this.audioContext.currentTime + duration / 1000);\n    } catch (error) {\n      console.warn('Audio playback failed:', error);\n    }\n  }\n\n  /**\n   * Timer start feedback\n   */\n  timerStart() {\n    this.vibrate(100);\n    this.beep(600, 150);\n  }\n\n  /**\n   * Timer pause feedback\n   */\n  timerPause() {\n    this.vibrate([50, 50, 50]);\n    this.beep(400, 100);\n  }\n\n  /**\n   * Round complete feedback\n   */\n  roundComplete() {\n    this.vibrate([100, 50, 100]);\n    this.beep(800, 200);\n  }\n\n  /**\n   * Exercise complete feedback\n   */\n  exerciseComplete() {\n    this.vibrate([150, 100, 150, 100, 150]);\n    this.playSuccess();\n  }\n\n  /**\n   * Session complete feedback\n   */\n  sessionComplete() {\n    this.vibrate([200, 100, 200, 100, 200, 100, 300]);\n    this.playSuccessChord();\n  }\n\n  /**\n   * Set complete feedback\n   */\n  setComplete() {\n    this.vibrate([100, 50, 100]);\n    this.beep(700, 150);\n  }\n\n  /**\n   * Rest start feedback (between sets)\n   */\n  restStart() {\n    this.vibrate(80);\n    this.beep(500, 150);\n  }\n\n  /**\n   * Rest complete feedback\n   */\n  restComplete() {\n    this.vibrate([50, 30, 50]);\n    this.beep(800, 100);\n  }\n\n  /**\n   * Work period start feedback (for circuits/N90)\n   */\n  workPeriodStart() {\n    this.vibrate([50, 30, 50]);\n    this.beep(1000, 100);\n  }\n\n  /**\n   * Rest period start feedback\n   */\n  restPeriodStart() {\n    this.vibrate(80);\n    this.beep(500, 150);\n  }\n\n  /**\n   * Countdown warning (last 3 seconds)\n   */\n  countdownWarning() {\n    this.vibrate(50);\n    this.beep(700, 100);\n  }\n\n  /**\n   * Play success sound (ascending notes)\n   */\n  private playSuccess() {\n    if (!this.audioContext) return;\n    \n    const notes = [523, 659, 784]; // C, E, G\n    notes.forEach((freq, index) => {\n      setTimeout(() => {\n        this.beep(freq, 200, 0.08);\n      }, index * 100);\n    });\n  }\n\n  /**\n   * Play success chord for session completion\n   */\n  private playSuccessChord() {\n    if (!this.audioContext) return;\n    \n    // Play a major chord\n    const chord = [523, 659, 784]; // C, E, G\n    chord.forEach(freq => {\n      this.beep(freq, 500, 0.05);\n    });\n  }\n\n  /**\n   * Test all feedback types\n   */\n  testFeedback() {\n    console.log('Testing feedback...');\n    \n    setTimeout(() => this.timerStart(), 0);\n    setTimeout(() => this.workPeriodStart(), 1000);\n    setTimeout(() => this.countdownWarning(), 2000);\n    setTimeout(() => this.restPeriodStart(), 3000);\n    setTimeout(() => this.roundComplete(), 4000);\n    setTimeout(() => this.exerciseComplete(), 5000);\n  }\n}\n\nexport const feedbackManager = new FeedbackManager();","import { BaseComponent } from './base-component';\nimport { SessionState } from './session-state';\nimport { SessionRenderer } from './session-renderer';\nimport { BaseTimer, TimerEvent } from '../timers/timer-engine';\nimport { TimerFactory } from '../timers/timer-factory';\nimport { Day } from '../types';\nimport { wakeLockManager } from '../utils/wake-lock';\nimport { backgroundTimerManager } from '../utils/background-timer';\nimport { feedbackManager } from '../utils/feedback';\n\n/**\n * ViewSession component using modular architecture\n */\nexport class ViewSession extends BaseComponent {\n  private state = new SessionState();\n  private currentTimer: BaseTimer | null = null;\n  private foregroundCallback: (() => void) | null = null;\n  private timerDisplay: any = null;\n\n  protected render(): void {\n    // Base styles\n    this.setHTML(`\n      <style>\n        :host {\n          display: block;\n          height: 100%;\n          padding: 0;\n        }\n\n        .session-container {\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n          background: var(--bg-primary);\n        }\n\n        .session-header {\n          background: var(--bg-secondary);\n          padding: 16px;\n          border-bottom: 1px solid var(--border);\n          flex-shrink: 0;\n        }\n\n        .session-title {\n          font-size: 18px;\n          font-weight: 600;\n          margin: 0 0 8px 0;\n        }\n\n        .session-progress {\n          font-size: 14px;\n          color: var(--text-secondary);\n        }\n\n        .progress-bar {\n          width: 100%;\n          height: 4px;\n          background: var(--border);\n          border-radius: 2px;\n          margin: 8px 0;\n          overflow: hidden;\n        }\n\n        .progress-bar::after {\n          content: '';\n          display: block;\n          height: 100%;\n          background: var(--accent);\n          border-radius: 2px;\n          transition: width 0.3s ease;\n        }\n\n        .session-main {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n        }\n\n        .current-exercise {\n          background: var(--bg-secondary);\n          padding: 20px;\n          text-align: center;\n          flex-shrink: 0;\n        }\n\n        .exercise-group {\n          margin-bottom: 16px;\n        }\n\n        .exercise-group:last-child {\n          margin-bottom: 0;\n        }\n\n        .exercise-name {\n          font-size: 24px;\n          font-weight: 700;\n          margin: 0 0 8px 0;\n          color: var(--accent);\n        }\n\n        .exercise-details {\n          font-size: 16px;\n          color: var(--text-secondary);\n          margin: 0;\n        }\n\n        .exercise-cues {\n          font-style: italic;\n          opacity: 0.8;\n        }\n\n        .timer-info {\n          font-size: 14px;\n          color: var(--text-secondary);\n          margin: 8px 0;\n          text-align: center;\n        }\n\n        .set-counter {\n          font-size: 18px;\n          font-weight: 600;\n          margin-top: 12px;\n          color: var(--text-primary);\n        }\n\n        .rest-timer {\n          padding: 32px 20px;\n          text-align: center;\n        }\n\n        .rest-label {\n          font-size: 14px;\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 1px;\n          margin-bottom: 8px;\n        }\n\n        .rest-countdown {\n          font-size: 48px;\n          font-weight: 700;\n          font-variant-numeric: tabular-nums;\n          margin: 10px 0;\n        }\n\n        .session-controls {\n          padding: 20px;\n          display: flex;\n          gap: 12px;\n          justify-content: center;\n          flex-shrink: 0;\n        }\n\n        .control-btn {\n          padding: 12px 24px;\n          font-size: 16px;\n          font-weight: 600;\n          border: none;\n          border-radius: 8px;\n          cursor: pointer;\n          transition: all 0.2s;\n          min-width: 100px;\n        }\n\n        .control-btn.primary {\n          background: var(--accent);\n          color: white;\n        }\n\n        .control-btn.secondary {\n          background: var(--bg-secondary);\n          color: var(--text-primary);\n          border: 1px solid var(--border);\n        }\n\n        .control-btn:disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n\n        .next-up {\n          padding: 16px 20px;\n          background: var(--bg-secondary);\n          border-top: 1px solid var(--border);\n          flex-shrink: 0;\n        }\n\n        .next-label {\n          font-size: 12px;\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n          margin: 0 0 4px 0;\n        }\n\n        .next-exercise {\n          font-size: 16px;\n          font-weight: 500;\n          margin: 0;\n        }\n\n        .session-empty {\n          flex: 1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          color: var(--text-secondary);\n          padding: 40px 20px;\n        }\n\n        .session-complete {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          padding: 40px 20px;\n        }\n\n        .complete-icon {\n          font-size: 64px;\n          margin: 0 0 16px 0;\n        }\n\n        .session-save-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.7);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n        }\n\n        .session-save-dialog {\n          background: var(--bg-primary);\n          border: 1px solid var(--border);\n          border-radius: 16px;\n          padding: 32px;\n          margin: 16px;\n          text-align: center;\n          max-width: 400px;\n          width: 100%;\n          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n        }\n\n        .dialog-buttons {\n          display: flex;\n          gap: 12px;\n          margin-top: 24px;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host {\n            --bg-primary: #000000;\n            --bg-secondary: #1a1a1a;\n            --text-primary: #ffffff;\n            --text-secondary: #999999;\n            --border: #333333;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-primary: #ffffff;\n            --bg-secondary: #f5f5f5;\n            --text-primary: #000000;\n            --text-secondary: #666666;\n            --border: #e0e0e0;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n      </style>\n\n      <div class=\"session-container\" id=\"container\">\n        <!-- Content will be rendered here -->\n      </div>\n    `);\n\n    this.updateContent();\n  }\n\n  /**\n   * Set the workout day\n   */\n  setDay(day: Day): void {\n    this.state.initialize(day);\n    this.updateContent();\n  }\n\n  /**\n   * Update the content based on current state\n   */\n  private updateContent(): void {\n    const container = this.$('#container');\n    if (!container) return;\n\n    const day = this.state.getDay();\n    \n    // No day loaded\n    if (!day) {\n      container.innerHTML = SessionRenderer.renderEmpty();\n      return;\n    }\n\n    // Session complete\n    if (this.state.isComplete()) {\n      container.innerHTML = SessionRenderer.renderSessionComplete();\n      return;\n    }\n\n    // Get current state\n    const block = this.state.getCurrentBlock();\n    const isInterval = block?.timerType === 'interval' && \n                       block.timerConfig?.exercisesPerInterval && \n                       block.timerConfig.exercisesPerInterval > 1;\n    \n    const exercises = isInterval \n      ? this.state.getCurrentIntervalExercises()\n      : (this.state.getCurrentExercise() ? [this.state.getCurrentExercise()!] : []);\n\n    const nextExercise = this.state.getNextExercise();\n    const progress = this.state.getProgress();\n\n    // Handle rest between sets\n    if (this.state.isResting() && this.currentTimer) {\n      const event = (this.currentTimer as any).lastEvent;\n      if (event) {\n        const remainingSeconds = Math.ceil(event.remaining / 1000);\n        container.innerHTML = SessionRenderer.renderContainer({\n          header: SessionRenderer.renderHeader(day, progress),\n          exercises: SessionRenderer.renderCurrentExercises(exercises, block, this.state.getCurrentSetNumber()),\n          timer: SessionRenderer.renderRestTimer(remainingSeconds),\n          nextUp: SessionRenderer.renderNextUp(nextExercise)\n        });\n        return;\n      }\n    }\n\n    // Render sections\n    const sections = {\n      header: SessionRenderer.renderHeader(day, progress),\n      exercises: SessionRenderer.renderCurrentExercises(exercises, block, this.state.getCurrentSetNumber()),\n      timerInfo: SessionRenderer.renderTimerInfo(block),\n      timer: '<timer-display id=\"timer-display\"></timer-display>',\n      controls: this.renderControlsForState(),\n      nextUp: SessionRenderer.renderNextUp(nextExercise)\n    };\n\n    container.innerHTML = SessionRenderer.renderContainer(sections);\n\n    // Update timer display component\n    this.timerDisplay = this.$('#timer-display');\n    if (this.timerDisplay && this.currentTimer) {\n      // Get latest timer event if available\n      const lastEvent = (this.currentTimer as any).lastEvent;\n      if (lastEvent) {\n        this.timerDisplay.updateFromEvent(lastEvent);\n      }\n    }\n  }\n\n  /**\n   * Render controls based on current state\n   */\n  private renderControlsForState(): string {\n    const block = this.state.getCurrentBlock();\n    const hasTimer = block?.timerType && block.timerType !== 'none';\n    const isInterval = block?.timerType === 'interval';\n    const hasMultiple = block?.timerConfig?.exercisesPerInterval && \n                       block.timerConfig.exercisesPerInterval > 1;\n    \n    const timerState = this.currentTimer?.getState() || 'idle';\n    const isRunning = timerState === 'running';\n    const isPaused = timerState === 'paused';\n    const isResting = this.state.isResting();\n\n    return SessionRenderer.renderControls(\n      isRunning,\n      isPaused,\n      isResting,\n      !!hasTimer,\n      !!isInterval,\n      !!hasMultiple\n    );\n  }\n\n  protected setupEventListeners(): void {\n    this.shadow.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      const action = target.dataset.action;\n\n      switch(action) {\n        case 'start':\n          this.startTimer();\n          break;\n        case 'pause':\n          this.pauseTimer();\n          break;\n        case 'resume':\n          this.resumeTimer();\n          break;\n        case 'reset':\n          this.resetTimer();\n          break;\n        case 'skip':\n        case 'skip-group':\n          this.skipExercise();\n          break;\n        case 'complete-set':\n          this.completeSet();\n          break;\n        case 'skip-rest':\n          this.skipRest();\n          break;\n        case 'finish':\n          this.finishSession();\n          break;\n        case 'save':\n          this.saveSession();\n          break;\n        case 'discard':\n          this.discardSession();\n          break;\n      }\n    });\n\n    this.setupBackgroundHandling();\n  }\n\n  private async startTimer(): Promise<void> {\n    await wakeLockManager.acquire();\n\n    const block = this.state.getCurrentBlock();\n    if (!block) return;\n\n    this.currentTimer = this.createTimerForCurrentBlock();\n    if (!this.currentTimer) return;\n\n    this.currentTimer.addCallback((event: TimerEvent) => {\n      this.handleTimerEvent(event);\n    });\n\n    this.currentTimer.start();\n    feedbackManager.timerStart();\n    this.updateContent();\n  }\n\n  private pauseTimer(): void {\n    this.currentTimer?.pause();\n    feedbackManager.timerPause();\n    this.updateContent();\n  }\n\n  private resumeTimer(): void {\n    this.currentTimer?.start();\n    feedbackManager.timerStart();\n    this.updateContent();\n  }\n\n  private resetTimer(): void {\n    this.currentTimer?.reset();\n    this.updateContent();\n  }\n\n  private skipExercise(): void {\n    const block = this.state.getCurrentBlock();\n    if (block?.timerType === 'interval' && block.timerConfig?.exercisesPerInterval && \n        block.timerConfig.exercisesPerInterval > 1) {\n      this.state.skipIntervalGroup();\n    } else {\n      this.state.nextExercise();\n    }\n    \n    this.currentTimer?.stop();\n    this.currentTimer = null;\n    this.updateContent();\n  }\n\n  private async completeSet(): Promise<void> {\n    const exercise = this.state.getCurrentExercise();\n    if (!exercise) return;\n\n    feedbackManager.setComplete();\n\n    const hasMoreSets = this.state.nextSet();\n    \n    if (!hasMoreSets) {\n      // Exercise complete, move to next\n      this.state.nextExercise();\n      this.updateContent();\n    } else if (exercise.restSec && exercise.restSec > 0) {\n      // Start rest timer\n      this.state.setResting(true);\n      this.currentTimer = TimerFactory.createRestTimer(exercise.restSec, 1);\n      \n      this.currentTimer.addCallback((event) => {\n        if (event.type === 'complete') {\n          this.handleRestComplete();\n        } else if (event.type === 'tick') {\n          // Store event for display\n          (this.currentTimer as any).lastEvent = event;\n          this.updateContent();\n        }\n      });\n      \n      this.currentTimer.start();\n      feedbackManager.restStart();\n      this.updateContent();\n    } else {\n      // No rest, just update display\n      this.updateContent();\n    }\n  }\n\n  private skipRest(): void {\n    this.currentTimer?.stop();\n    this.currentTimer = null;\n    this.handleRestComplete();\n  }\n\n  private handleRestComplete(): void {\n    this.state.setResting(false);\n    this.currentTimer = null;\n    feedbackManager.restComplete();\n    this.updateContent();\n  }\n\n  private createTimerForCurrentBlock(): BaseTimer | null {\n    const block = this.state.getCurrentBlock();\n    if (!block?.timerType || block.timerType === 'none') return null;\n\n    // Adjust rounds for interval timers\n    if (block.timerType === 'interval' && block.timerConfig?.exercisesPerInterval && \n        block.timerConfig.exercisesPerInterval > 1) {\n      const indices = this.state.getIndices();\n      const exercisesPerInterval = block.timerConfig.exercisesPerInterval;\n      const currentRoundIndex = Math.floor(indices.exerciseIndex / exercisesPerInterval);\n      const totalRounds = Math.ceil(block.exercises.length / exercisesPerInterval);\n      const remainingRounds = totalRounds - currentRoundIndex;\n      \n      return TimerFactory.createTimer(block.timerType, {\n        ...block.timerConfig,\n        rounds: remainingRounds\n      });\n    }\n\n    return TimerFactory.createTimer(block.timerType, block.timerConfig);\n  }\n\n  private handleTimerEvent(event: TimerEvent): void {\n    // Update timer display\n    if (this.timerDisplay) {\n      this.timerDisplay.updateFromEvent(event);\n    }\n\n    // Store event for later use\n    (this.currentTimer as any).lastEvent = event;\n\n    if (event.type === 'tick') {\n      this.checkForCountdownWarning(event.remaining);\n    } else if (event.type === 'complete') {\n      feedbackManager.exerciseComplete();\n      this.updateContent();\n    } else if (event.type === 'roundComplete') {\n      feedbackManager.roundComplete();\n    }\n  }\n\n  private checkForCountdownWarning(remaining: number): void {\n    const secondsRemaining = Math.ceil(remaining / 1000);\n    \n    if (secondsRemaining <= 3 && secondsRemaining > 0) {\n      const lastWarnTime = (this as any).lastWarnTime || 0;\n      const currentTime = performance.now();\n      \n      if (currentTime - lastWarnTime > 900) {\n        feedbackManager.countdownWarning();\n        (this as any).lastWarnTime = currentTime;\n      }\n    }\n  }\n\n  private async finishSession(): Promise<void> {\n    feedbackManager.sessionComplete();\n    await this.cleanup();\n    this.showSaveDialog();\n  }\n\n  private showSaveDialog(): void {\n    const container = this.$('#container');\n    if (container) {\n      const dialogHtml = SessionRenderer.renderSaveDialog();\n      const overlay = document.createElement('div');\n      overlay.innerHTML = dialogHtml;\n      container.appendChild(overlay.firstElementChild!);\n    }\n  }\n\n  private saveSession(): void {\n    console.log('Session saved');\n    // TODO: Actually save to IndexedDB\n    \n    this.emit('session-complete', {\n      day: this.state.getDay(),\n      duration: this.state.getSessionDuration(),\n      saved: true\n    });\n  }\n\n  private discardSession(): void {\n    console.log('Session discarded');\n    \n    this.emit('session-complete', {\n      day: this.state.getDay(),\n      duration: this.state.getSessionDuration(),\n      saved: false\n    });\n  }\n\n  private setupBackgroundHandling(): void {\n    this.foregroundCallback = () => {\n      if (this.currentTimer?.getState() === 'running') {\n        wakeLockManager.reacquire();\n      }\n      this.updateContent();\n    };\n\n    backgroundTimerManager.addForegroundCallback(this.foregroundCallback);\n  }\n\n  protected cleanup(): void {\n    if (this.currentTimer) {\n      this.currentTimer.stop();\n      this.currentTimer = null;\n    }\n\n    wakeLockManager.release();\n\n    if (this.foregroundCallback) {\n      backgroundTimerManager.removeForegroundCallback(this.foregroundCallback);\n      this.foregroundCallback = null;\n    }\n  }\n}\n\ncustomElements.define('view-session', ViewSession);","/**\n * App update manager for PWA\n * Handles service worker updates and notifies user when new version is available\n */\nexport class AppUpdater {\n  private registration: ServiceWorkerRegistration | null = null;\n  private showUpdateCallback: (() => void) | null = null;\n  private updateNotificationShown: boolean = false;\n\n  constructor() {\n    // Wait for DOM to be ready before setting up service worker\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => this.setupUpdateDetection());\n    } else {\n      this.setupUpdateDetection();\n    }\n  }\n\n  private async setupUpdateDetection() {\n    if (!('serviceWorker' in navigator)) {\n      console.log('Service workers not supported');\n      return;\n    }\n\n    try {\n      // Register service worker\n      this.registration = await navigator.serviceWorker.register('/sw.js');\n      console.log('ServiceWorker registered:', this.registration);\n\n      // Check for updates immediately on startup\n      console.log('Checking for updates on startup...');\n      await this.checkForUpdates();\n      \n      // Check if there's already a waiting worker (happens on app restart)\n      console.log('Checking for waiting service worker...');\n      this.checkForWaitingWorker();\n      \n      // Double-check after a short delay to catch any race conditions\n      setTimeout(() => {\n        console.log('Double-checking for waiting service worker after delay...');\n        this.checkForWaitingWorker();\n      }, 1000);\n\n      // Also listen for when a waiting worker becomes available later\n      if (this.registration.installing) {\n        this.trackInstallingWorker(this.registration.installing);\n      }\n\n      // Check for updates every 30 seconds when app is active\n      setInterval(() => {\n        if (document.visibilityState === 'visible') {\n          console.log('Periodic update check (30s interval)');\n          this.checkForUpdates();\n        }\n      }, 30000);\n\n      // Check for updates when app comes to foreground\n      document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible') {\n          console.log('App came to foreground, checking for updates');\n          this.checkForUpdates();\n        }\n      });\n\n      // Listen for service worker updates\n      this.registration.addEventListener('updatefound', () => {\n        console.log('Update found, installing new version...');\n        const newWorker = this.registration?.installing;\n        \n        if (newWorker) {\n          this.trackInstallingWorker(newWorker);\n        }\n      });\n\n      // Listen for service worker controlling the page\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        console.log('New service worker took control, reloading page');\n        window.location.reload();\n      });\n\n    } catch (error) {\n      console.error('ServiceWorker registration failed:', error);\n    }\n  }\n\n  private async checkForUpdates() {\n    if (!this.registration) {\n      console.log('No registration available for update check');\n      return;\n    }\n\n    try {\n      console.log('Calling registration.update()...');\n      await this.registration.update();\n      console.log('Update check completed');\n      \n      // After update check, also check if there's a waiting worker\n      if (this.registration.waiting) {\n        console.log('Found waiting worker after update check');\n        this.showUpdateAvailable();\n      }\n    } catch (error) {\n      console.error('Failed to check for updates:', error);\n    }\n  }\n\n  private checkForWaitingWorker() {\n    if (!this.registration) return;\n\n    if (this.registration.waiting) {\n      console.log('Found waiting service worker on startup');\n      this.showUpdateAvailable();\n    }\n  }\n\n  private trackInstallingWorker(worker: ServiceWorker) {\n    worker.addEventListener('statechange', () => {\n      console.log('Service worker state changed:', worker.state);\n      if (worker.state === 'installed' && navigator.serviceWorker.controller) {\n        // New version is ready\n        console.log('New version ready');\n        this.showUpdateAvailable();\n      }\n    });\n  }\n\n  private showUpdateAvailable() {\n    // Prevent showing multiple notifications\n    if (this.updateNotificationShown) {\n      console.log('Update notification already shown, skipping');\n      return;\n    }\n    \n    this.updateNotificationShown = true;\n    \n    if (this.showUpdateCallback) {\n      this.showUpdateCallback();\n    } else {\n      // Default behavior if no callback is set\n      this.showDefaultUpdateNotification();\n    }\n  }\n\n  private showDefaultUpdateNotification() {\n    if (confirm('A new version of Minimalift is available! Click OK to update now.')) {\n      this.applyUpdate();\n    }\n  }\n\n  /**\n   * Set callback function to show custom update notification\n   */\n  onUpdateAvailable(callback: () => void) {\n    this.showUpdateCallback = callback;\n  }\n\n  /**\n   * Apply the pending update\n   */\n  async applyUpdate() {\n    if (!this.registration?.waiting) {\n      console.log('No update waiting');\n      return;\n    }\n\n    // Reset the flag so future updates can be shown\n    this.updateNotificationShown = false;\n    \n    // Tell the waiting service worker to skip waiting and become active\n    this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n  }\n\n  /**\n   * Force check for updates (public method for manual triggering)\n   */\n  async forceUpdateCheck() {\n    console.log('Manual update check triggered...');\n    await this.checkForUpdates();\n    \n    // Give some time for the update process to complete\n    setTimeout(() => {\n      this.checkForWaitingWorker();\n    }, 2000);\n  }\n}\n\nexport const appUpdater = new AppUpdater();","import { appUpdater } from '../utils/app-updater';\n\nexport class UpdateIndicator extends HTMLElement {\n  private isUpdateAvailable = false;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this.setupUpdateListener();\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setupEventListeners();\n  }\n\n  private setupUpdateListener() {\n    appUpdater.onUpdateAvailable(() => {\n      this.isUpdateAvailable = true;\n      this.show();\n    });\n  }\n\n  private render() {\n    if (!this.shadowRoot) return;\n\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: none;\n          position: relative;\n          align-items: center;\n          justify-content: center;\n          width: 32px;\n          height: 32px;\n          cursor: pointer;\n          transition: opacity 0.3s ease;\n        }\n\n        :host(.visible) {\n          display: flex;\n        }\n\n        .indicator {\n          position: relative;\n          width: 20px;\n          height: 20px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .dot {\n          width: 8px;\n          height: 8px;\n          background: var(--accent, #007AFF);\n          border-radius: 50%;\n          animation: pulse 2s ease-in-out infinite;\n        }\n\n        .icon {\n          width: 20px;\n          height: 20px;\n          color: var(--accent, #007AFF);\n          animation: bounce 3s ease-in-out infinite;\n        }\n\n        @keyframes pulse {\n          0%, 100% {\n            transform: scale(1);\n            opacity: 1;\n          }\n          50% {\n            transform: scale(1.2);\n            opacity: 0.8;\n          }\n        }\n\n        @keyframes bounce {\n          0%, 100% {\n            transform: translateY(0);\n          }\n          50% {\n            transform: translateY(-2px);\n          }\n        }\n\n        .tooltip {\n          position: absolute;\n          bottom: -36px;\n          left: 50%;\n          transform: translateX(-50%);\n          background: rgba(0, 0, 0, 0.9);\n          color: white;\n          padding: 6px 10px;\n          border-radius: 4px;\n          font-size: 12px;\n          white-space: nowrap;\n          pointer-events: none;\n          opacity: 0;\n          transition: opacity 0.2s ease;\n          z-index: 1000;\n        }\n\n        .tooltip::before {\n          content: '';\n          position: absolute;\n          top: -4px;\n          left: 50%;\n          transform: translateX(-50%);\n          width: 0;\n          height: 0;\n          border-left: 4px solid transparent;\n          border-right: 4px solid transparent;\n          border-bottom: 4px solid rgba(0, 0, 0, 0.9);\n        }\n\n        :host(:hover) .tooltip {\n          opacity: 1;\n        }\n\n        /* Loading state */\n        :host(.updating) .icon {\n          animation: rotate 1s linear infinite;\n        }\n\n        @keyframes rotate {\n          from {\n            transform: rotate(0deg);\n          }\n          to {\n            transform: rotate(360deg);\n          }\n        }\n      </style>\n\n      <div class=\"indicator\" aria-label=\"Update available\">\n        <!-- Using download arrow icon -->\n        <svg class=\"icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clip-rule=\"evenodd\"/>\n        </svg>\n        <div class=\"tooltip\">Update available - click to install</div>\n      </div>\n    `;\n  }\n\n  private setupEventListeners() {\n    if (!this.shadowRoot) return;\n\n    this.addEventListener('click', () => {\n      if (this.isUpdateAvailable) {\n        this.applyUpdate();\n      }\n    });\n  }\n\n  private show() {\n    this.classList.add('visible');\n  }\n\n\n  private async applyUpdate() {\n    // Show loading state\n    this.classList.add('updating');\n    \n    const indicator = this.shadowRoot?.querySelector('.indicator');\n    if (indicator) {\n      indicator.innerHTML = `\n        <svg class=\"icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\"/>\n        </svg>\n        <div class=\"tooltip\">Updating...</div>\n      `;\n    }\n\n    // Apply the update\n    await appUpdater.applyUpdate();\n  }\n}\n\ncustomElements.define('update-indicator', UpdateIndicator);","import { BaseComponent } from './base-component';\nimport { TimerEvent } from '../timers/timer-engine';\n\n/**\n * Timer display component that shows countdown, progress, and phase information.\n * This is a pure display component - it doesn't control the timer, just shows its state.\n */\nexport class TimerDisplay extends BaseComponent {\n  private latestEvent: TimerEvent | null = null;\n\n  protected render(): void {\n    this.setHTML(`\n      <style>\n        :host {\n          display: block;\n        }\n\n        .timer-container {\n          padding: 20px;\n          text-align: center;\n        }\n\n        .timer-display {\n          font-size: 48px;\n          font-weight: 700;\n          font-variant-numeric: tabular-nums;\n          margin: 10px 0;\n        }\n\n        .timer-display.warning {\n          color: var(--warning, #FF9500);\n        }\n\n        .timer-phase {\n          font-size: 14px;\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 1px;\n          margin-bottom: 8px;\n        }\n\n        .timer-progress {\n          width: 100%;\n          height: 4px;\n          background: var(--bg-secondary);\n          border-radius: 2px;\n          overflow: hidden;\n          margin-top: 16px;\n        }\n\n        .timer-progress-bar {\n          height: 100%;\n          background: var(--accent, #007AFF);\n          transition: width 0.1s linear;\n        }\n\n        .timer-info {\n          margin-top: 12px;\n          font-size: 14px;\n          color: var(--text-secondary);\n        }\n\n        .timer-round {\n          font-weight: 600;\n        }\n\n        /* Hide when no timer */\n        :host(:empty) .timer-container {\n          display: none;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host {\n            --bg-secondary: #1a1a1a;\n            --text-secondary: #999999;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n\n        @media (prefers-color-scheme: light) {\n          :host {\n            --bg-secondary: #f5f5f5;\n            --text-secondary: #666666;\n            --accent: #007AFF;\n            --warning: #FF9500;\n          }\n        }\n      </style>\n\n      <div class=\"timer-container\">\n        <div class=\"timer-phase\"></div>\n        <div class=\"timer-display\">--:--</div>\n        <div class=\"timer-progress\">\n          <div class=\"timer-progress-bar\" style=\"width: 0%\"></div>\n        </div>\n        <div class=\"timer-info\"></div>\n      </div>\n    `);\n  }\n\n  /**\n   * Clear the timer display\n   */\n  clear(): void {\n    this.latestEvent = null;\n    this.updateDisplay();\n  }\n\n  /**\n   * Update the display with a timer event\n   */\n  updateFromEvent(event: TimerEvent): void {\n    this.latestEvent = event;\n    this.updateDisplay();\n  }\n\n  /**\n   * Update the timer display with current values\n   */\n  private updateDisplay(): void {\n    const display = this.$('.timer-display') as HTMLElement;\n    const progressBar = this.$('.timer-progress-bar') as HTMLElement;\n    const infoEl = this.$('.timer-info') as HTMLElement;\n\n    if (!display || !this.latestEvent) {\n      if (display) {\n        display.textContent = '--:--';\n      }\n      return;\n    }\n\n    const event = this.latestEvent;\n    \n    // Update time display\n    display.textContent = this.formatTime(event.remaining);\n    \n    // Add warning class for last 3 seconds\n    display.classList.toggle('warning', event.remaining <= 3000);\n    \n    // Update progress bar (simplified for now)\n    const progress = this.calculateProgress();\n    if (progressBar) {\n      progressBar.style.width = `${progress}%`;\n    }\n\n    // Update round info\n    const info = this.getRoundInfo();\n    if (infoEl && info) {\n      infoEl.innerHTML = info;\n    }\n  }\n\n  /**\n   * Format milliseconds to MM:SS or M:SS\n   */\n  private formatTime(ms: number): string {\n    const totalSeconds = Math.ceil(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    \n    if (minutes > 0) {\n      return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    }\n    return `0:${seconds.toString().padStart(2, '0')}`;\n  }\n\n  /**\n   * Calculate progress percentage (simplified)\n   */\n  private calculateProgress(): number {\n    if (!this.latestEvent) return 0;\n    \n    // Simple progress based on elapsed vs total\n    // This is a simplified version - can be enhanced later\n    const total = this.latestEvent.elapsed + this.latestEvent.remaining;\n    if (total <= 0) return 0;\n    \n    return (this.latestEvent.elapsed / total) * 100;\n  }\n\n  /**\n   * Get round information text\n   */\n  private getRoundInfo(): string {\n    if (!this.latestEvent) return '';\n\n    // Show round info if available\n    if (this.latestEvent.round !== undefined && this.latestEvent.totalRounds) {\n      return `<span class=\"timer-round\">Round ${this.latestEvent.round + 1} of ${this.latestEvent.totalRounds}</span>`;\n    }\n\n    return '';\n  }\n}\n\ncustomElements.define('timer-display', TimerDisplay);","type RouteHandler = () => void;\n\ninterface Route {\n  path: string;\n  handler: RouteHandler;\n}\n\nexport class Router {\n  private routes: Route[] = [];\n  private currentPath: string = '';\n\n  constructor() {\n    window.addEventListener('hashchange', () => this.handleRouteChange());\n    window.addEventListener('DOMContentLoaded', () => this.handleRouteChange());\n  }\n\n  register(path: string, handler: RouteHandler): void {\n    this.routes.push({ path, handler });\n  }\n\n  navigate(path: string): void {\n    window.location.hash = path;\n  }\n\n  private handleRouteChange(): void {\n    const hash = window.location.hash.slice(1) || '/';\n    this.currentPath = hash;\n\n    // Find matching route\n    const route = this.routes.find(r => {\n      if (r.path.includes(':')) {\n        // Handle dynamic routes like /day/:id\n        const regex = new RegExp('^' + r.path.replace(/:[^/]+/g, '([^/]+)') + '$');\n        return regex.test(hash);\n      }\n      return r.path === hash;\n    });\n\n    if (route) {\n      route.handler();\n    } else {\n      // Default to home\n      const homeRoute = this.routes.find(r => r.path === '/');\n      if (homeRoute) {\n        homeRoute.handler();\n      }\n    }\n  }\n\n  getParams(): Record<string, string> {\n    const hash = window.location.hash.slice(1) || '/';\n    const params: Record<string, string> = {};\n\n    // Find matching route with params\n    this.routes.find(r => {\n      if (r.path.includes(':')) {\n        const pathParts = r.path.split('/');\n        const hashParts = hash.split('/');\n        \n        if (pathParts.length === hashParts.length) {\n          let matches = true;\n          for (let i = 0; i < pathParts.length; i++) {\n            if (pathParts[i].startsWith(':')) {\n              params[pathParts[i].slice(1)] = hashParts[i];\n            } else if (pathParts[i] !== hashParts[i]) {\n              matches = false;\n              break;\n            }\n          }\n          return matches;\n        }\n      }\n      return false;\n    });\n\n    return params;\n  }\n\n  getCurrentPath(): string {\n    return this.currentPath;\n  }\n\n  start(): void {\n    this.handleRouteChange();\n  }\n}\n\nexport const router = new Router();","import './ui/app-shell';\nimport './ui/view-home';\nimport './ui/view-day';\nimport './ui/view-session';\nimport './ui/update-indicator';\nimport './ui/timer-display';\nimport { router } from './router';\nimport { programManager } from './program';\n\n// Service worker registration is now handled by AppUpdater\n\n// Initialize app with error handling\ndocument.addEventListener('DOMContentLoaded', async () => {\n  console.log('DOM loaded, initializing app...');\n  try {\n  // Initialize data\n  console.log('Initializing program manager...');\n  await programManager.initialize();\n  console.log('Program manager initialized');\n\n  // Wait for app-shell to be fully initialized\n  const appShell = document.querySelector('app-shell');\n  if (!appShell) {\n    console.error('App shell not found');\n    return;\n  }\n\n  console.log('Found app shell, waiting for shadow DOM...');\n\n  // Wait for the shadow DOM to be ready\n  await new Promise(resolve => {\n    const check = () => {\n      const shadowRoot = (appShell as any).shadowRoot;\n      if (shadowRoot && shadowRoot.querySelector('#content')) {\n        console.log('Shadow DOM ready');\n        resolve(void 0);\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n  \n  const content = (appShell as any).shadowRoot.querySelector('#content') as HTMLElement;\n  \n  if (!content) {\n    console.error('Content container not found');\n    return;\n  }\n\n  // Set up routing\n  router.register('/', () => showHome());\n  router.register('/day/:id', () => showDay());\n  router.register('/session/:id', () => showSession());\n\n  function showHome() {\n    content.innerHTML = '<view-home></view-home>';\n    const viewHome = content.querySelector('view-home');\n    \n    viewHome?.addEventListener('navigate-to-day', ((e: CustomEvent) => {\n      router.navigate(`/day/${e.detail.dayId}`);\n    }) as EventListener);\n  }\n\n  function showDay() {\n    const params = router.getParams();\n    const dayId = params.id;\n    \n    if (dayId) {\n      content.innerHTML = '<view-day></view-day>';\n      const viewDay = content.querySelector('view-day') as any;\n      \n      if (viewDay && viewDay.loadDay) {\n        viewDay.loadDay(dayId);\n      }\n\n      viewDay?.addEventListener('start-session', ((e: CustomEvent) => {\n        router.navigate(`/session/${e.detail.dayId}`);\n      }) as EventListener);\n    }\n  }\n\n  async function showSession() {\n    const params = router.getParams();\n    const dayId = params.id;\n    \n    if (dayId) {\n      const day = await programManager.getDay(dayId);\n      if (day) {\n        content.innerHTML = '<view-session></view-session>';\n        const viewSession = content.querySelector('view-session') as any;\n        \n        if (viewSession && viewSession.setDay) {\n          viewSession.setDay(day);\n        }\n\n        viewSession?.addEventListener('session-complete', ((e: CustomEvent) => {\n          console.log('Session completed:', e.detail);\n          router.navigate(`/day/${dayId}`);\n        }) as EventListener);\n      }\n    }\n  }\n\n  if (appShell) {\n    // Listen for day selection from header\n    appShell.addEventListener('day-selected', ((e: CustomEvent) => {\n      const dayNumber = e.detail.day;\n      const dayId = `p1_w1_d${dayNumber}`;\n      router.navigate(`/day/${dayId}`);\n    }) as EventListener);\n  }\n\n  // Start the router\n  console.log('Starting router...');\n  router.start();\n  \n  // Default to Day 1 if no hash is set\n  if (!window.location.hash || window.location.hash === '#/') {\n    console.log('No hash found, navigating to Day 1');\n    router.navigate('/day/p1_w1_d1');\n  } else {\n    console.log('Found hash:', window.location.hash);\n  }\n  \n  console.log('App initialization complete');\n  } catch (error) {\n    console.error('Failed to initialize app:', error);\n    // Show error message to user\n    document.body.innerHTML = `\n      <div style=\"padding: 20px; text-align: center; font-family: -apple-system, BlinkMacSystemFont, sans-serif;\">\n        <h1>Oops! Something went wrong</h1>\n        <p>There was an error loading Minimalift. Please refresh the page to try again.</p>\n        <button onclick=\"window.location.reload()\" style=\"padding: 10px 20px; font-size: 16px; background: #007AFF; color: white; border: none; border-radius: 6px; cursor: pointer;\">\n          Reload App\n        </button>\n      </div>\n    `;\n  }\n});"],"file":"assets/index-Bq_PSdTy.js"}